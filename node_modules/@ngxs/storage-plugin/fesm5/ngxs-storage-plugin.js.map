{"version":3,"file":"ngxs-storage-plugin.js","sources":["ng:/@ngxs/storage-plugin/src/symbols.ts","ng:/@ngxs/storage-plugin/src/internals.ts","ng:/@ngxs/storage-plugin/src/storage.plugin.ts","ng:/@ngxs/storage-plugin/src/storage.module.ts"],"names":["tslib_1.__values"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nimport { StorageKey } from './internals';\r\n\r\nexport const enum StorageOption {\r\n  LocalStorage,\r\n  SessionStorage\r\n}\r\n\r\nexport interface NgxsStoragePluginOptions {\r\n  /**\r\n   * Key for the state slice to store in the storage engine.\r\n   */\r\n  key?: undefined | StorageKey;\r\n\r\n  /**\r\n   * Storage engine to use. Deaults to localStorage but can provide\r\n   *\r\n   * sessionStorage or custom implementation of the StorageEngine interface\r\n   */\r\n  storage?: StorageOption;\r\n\r\n  /**\r\n   * Migration strategies.\r\n   */\r\n  migrations?: {\r\n    /**\r\n     * Version to key off.\r\n     */\r\n    version: number | string;\r\n\r\n    /**\r\n     * Method to migrate the previous state.\r\n     */\r\n    migrate: (state: any) => any;\r\n\r\n    /**\r\n     * Key to migrate.\r\n     */\r\n    key?: string;\r\n\r\n    /**\r\n     * Key for the version. Defaults to 'version'.\r\n     */\r\n    versionKey?: string;\r\n  }[];\r\n\r\n  /**\r\n   * Serailizer for the object before its pushed into the engine.\r\n   */\r\n  serialize?(obj: any): string;\r\n\r\n  /**\r\n   * Deserializer for the object before its pulled out of the engine.\r\n   */\r\n  deserialize?(obj: any): any;\r\n\r\n  /**\r\n   * Method to alter object before serialization.\r\n   */\r\n  beforeSerialize?(obj: any, key: string): any;\r\n\r\n  /**\r\n   * Method to alter object after deserialization.\r\n   */\r\n  afterDeserialize?(obj: any, key: string): any;\r\n}\r\n\r\nexport const NGXS_STORAGE_PLUGIN_OPTIONS = new InjectionToken('NGXS_STORAGE_PLUGIN_OPTION');\r\n\r\nexport const STORAGE_ENGINE = new InjectionToken('STORAGE_ENGINE');\r\n\r\nexport interface StorageEngine {\r\n  readonly length: number;\r\n  getItem(key: string): any;\r\n  setItem(key: string, val: any): void;\r\n  removeItem(key: string): void;\r\n  clear(): void;\r\n}\r\n","import { isPlatformServer } from '@angular/common';\r\nimport { StateClass } from '@ngxs/store/internals';\r\nimport { StateToken } from '@ngxs/store';\r\n\r\nimport { StorageOption, StorageEngine, NgxsStoragePluginOptions } from './symbols';\r\n\r\n/**\r\n * If the `key` option is not provided then the below constant\r\n * will be used as a default key\r\n */\r\nexport const DEFAULT_STATE_KEY = '@@STATE';\r\n\r\n/**\r\n * Internal type definition for the `key` option provided\r\n * in the `forRoot` method when importing module\r\n */\r\nexport type StorageKey =\r\n  | string\r\n  | StateClass\r\n  | StateToken<any>\r\n  | (string | StateClass | StateToken<any>)[];\r\n\r\n/**\r\n * This key is used to retrieve static metadatas on state classes.\r\n * This constant is taken from the core codebase\r\n */\r\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\n\r\nfunction transformKeyOption(key: StorageKey): string[] {\r\n  if (!Array.isArray(key)) {\r\n    key = [key];\r\n  }\r\n\r\n  return key.map((token: string | StateClass | StateToken<any>) => {\r\n    // If it has the `NGXS_OPTIONS_META` key then it means the developer\r\n    // has provided state class like `key: [AuthState]`.\r\n    if (token.hasOwnProperty(META_OPTIONS_KEY)) {\r\n      // The `name` property will be an actual state name or a `StateToken`.\r\n      token = (token as any)[META_OPTIONS_KEY].name;\r\n    }\r\n\r\n    return token instanceof StateToken ? token.getName() : (token as string);\r\n  });\r\n}\r\n\r\nexport function storageOptionsFactory(\r\n  options: NgxsStoragePluginOptions | undefined\r\n): NgxsStoragePluginOptions {\r\n  if (options !== undefined && options.key) {\r\n    options.key = transformKeyOption(options.key);\r\n  }\r\n\r\n  return {\r\n    key: [DEFAULT_STATE_KEY],\r\n    storage: StorageOption.LocalStorage,\r\n    serialize: JSON.stringify,\r\n    deserialize: JSON.parse,\r\n    beforeSerialize: obj => obj,\r\n    afterDeserialize: obj => obj,\r\n    ...options\r\n  };\r\n}\r\n\r\nexport function engineFactory(\r\n  options: NgxsStoragePluginOptions,\r\n  platformId: string\r\n): StorageEngine | null {\r\n  if (isPlatformServer(platformId)) {\r\n    return null;\r\n  }\r\n\r\n  if (options.storage === StorageOption.LocalStorage) {\r\n    return localStorage;\r\n  } else if (options.storage === StorageOption.SessionStorage) {\r\n    return sessionStorage;\r\n  }\r\n\r\n  return null;\r\n}\r\n","import { PLATFORM_ID, Inject, Injectable } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport {\r\n  NgxsPlugin,\r\n  setValue,\r\n  getValue,\r\n  InitState,\r\n  UpdateState,\r\n  actionMatcher,\r\n  NgxsNextPluginFn\r\n} from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport {\r\n  StorageEngine,\r\n  NgxsStoragePluginOptions,\r\n  STORAGE_ENGINE,\r\n  NGXS_STORAGE_PLUGIN_OPTIONS\r\n} from './symbols';\r\nimport { DEFAULT_STATE_KEY } from './internals';\r\n\r\n@Injectable()\r\nexport class NgxsStoragePlugin implements NgxsPlugin {\r\n  constructor(\r\n    @Inject(NGXS_STORAGE_PLUGIN_OPTIONS) private _options: NgxsStoragePluginOptions,\r\n    @Inject(STORAGE_ENGINE) private _engine: StorageEngine,\r\n    @Inject(PLATFORM_ID) private _platformId: string\r\n  ) {}\r\n\r\n  handle(state: any, event: any, next: NgxsNextPluginFn) {\r\n    if (isPlatformServer(this._platformId) && this._engine === null) {\r\n      return next(state, event);\r\n    }\r\n\r\n    // We cast to `string[]` here as we're sure that this option has been\r\n    // transformed by the `storageOptionsFactory` function that provided token\r\n    const keys = this._options.key as string[];\r\n    const matches = actionMatcher(event);\r\n    const isInitAction = matches(InitState) || matches(UpdateState);\r\n    let hasMigration = false;\r\n\r\n    if (isInitAction) {\r\n      for (const key of keys) {\r\n        const isMaster = key === DEFAULT_STATE_KEY;\r\n        let val: any = this._engine.getItem(key!);\r\n\r\n        if (val !== 'undefined' && typeof val !== 'undefined' && val !== null) {\r\n          try {\r\n            const newVal = this._options.deserialize!(val);\r\n            val = this._options.afterDeserialize!(newVal, key);\r\n          } catch (e) {\r\n            console.error(\r\n              'Error ocurred while deserializing the store value, falling back to empty object.'\r\n            );\r\n            val = {};\r\n          }\r\n\r\n          if (this._options.migrations) {\r\n            this._options.migrations.forEach(strategy => {\r\n              const versionMatch =\r\n                strategy.version === getValue(val, strategy.versionKey || 'version');\r\n              const keyMatch = (!strategy.key && isMaster) || strategy.key === key;\r\n              if (versionMatch && keyMatch) {\r\n                val = strategy.migrate(val);\r\n                hasMigration = true;\r\n              }\r\n            });\r\n          }\r\n\r\n          if (!isMaster) {\r\n            state = setValue(state, key!, val);\r\n          } else {\r\n            state = { ...state, ...val };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return next(state, event).pipe(\r\n      tap(nextState => {\r\n        if (!isInitAction || (isInitAction && hasMigration)) {\r\n          for (const key of keys) {\r\n            let val = nextState;\r\n\r\n            if (key !== DEFAULT_STATE_KEY) {\r\n              val = getValue(nextState, key!);\r\n            }\r\n\r\n            try {\r\n              const newVal = this._options.beforeSerialize!(val, key);\r\n              this._engine.setItem(key!, this._options.serialize!(newVal));\r\n            } catch (e) {\r\n              console.error(\r\n                'Error ocurred while serializing the store value, value not updated.'\r\n              );\r\n            }\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders, PLATFORM_ID, InjectionToken } from '@angular/core';\r\nimport { NGXS_PLUGINS } from '@ngxs/store';\r\n\r\nimport {\r\n  NgxsStoragePluginOptions,\r\n  STORAGE_ENGINE,\r\n  NGXS_STORAGE_PLUGIN_OPTIONS\r\n} from './symbols';\r\nimport { NgxsStoragePlugin } from './storage.plugin';\r\nimport { storageOptionsFactory, engineFactory } from './internals';\r\n\r\nexport const USER_OPTIONS = new InjectionToken('USER_OPTIONS');\r\n\r\n@NgModule()\r\nexport class NgxsStoragePluginModule {\r\n  static forRoot(\r\n    options?: NgxsStoragePluginOptions\r\n  ): ModuleWithProviders<NgxsStoragePluginModule> {\r\n    return {\r\n      ngModule: NgxsStoragePluginModule,\r\n      providers: [\r\n        {\r\n          provide: NGXS_PLUGINS,\r\n          useClass: NgxsStoragePlugin,\r\n          multi: true\r\n        },\r\n        {\r\n          provide: USER_OPTIONS,\r\n          useValue: options\r\n        },\r\n        {\r\n          provide: NGXS_STORAGE_PLUGIN_OPTIONS,\r\n          useFactory: storageOptionsFactory,\r\n          deps: [USER_OPTIONS]\r\n        },\r\n        {\r\n          provide: STORAGE_ENGINE,\r\n          useFactory: engineFactory,\r\n          deps: [NGXS_STORAGE_PLUGIN_OPTIONS, PLATFORM_ID]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}