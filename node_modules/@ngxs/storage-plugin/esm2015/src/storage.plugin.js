/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PLATFORM_ID, Inject, Injectable } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { setValue, getValue, InitState, UpdateState, actionMatcher } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { STORAGE_ENGINE, NGXS_STORAGE_PLUGIN_OPTIONS } from './symbols';
import { DEFAULT_STATE_KEY } from './internals';
import * as ɵngcc0 from '@angular/core';
export class NgxsStoragePlugin {
    /**
     * @param {?} _options
     * @param {?} _engine
     * @param {?} _platformId
     */
    constructor(_options, _engine, _platformId) {
        this._options = _options;
        this._engine = _engine;
        this._platformId = _platformId;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    handle(state, event, next) {
        if (isPlatformServer(this._platformId) && this._engine === null) {
            return next(state, event);
        }
        // We cast to `string[]` here as we're sure that this option has been
        // transformed by the `storageOptionsFactory` function that provided token
        /** @type {?} */
        const keys = (/** @type {?} */ (this._options.key));
        /** @type {?} */
        const matches = actionMatcher(event);
        /** @type {?} */
        const isInitAction = matches(InitState) || matches(UpdateState);
        /** @type {?} */
        let hasMigration = false;
        if (isInitAction) {
            for (const key of keys) {
                /** @type {?} */
                const isMaster = key === DEFAULT_STATE_KEY;
                /** @type {?} */
                let val = this._engine.getItem((/** @type {?} */ (key)));
                if (val !== 'undefined' && typeof val !== 'undefined' && val !== null) {
                    try {
                        /** @type {?} */
                        const newVal = (/** @type {?} */ (this._options.deserialize))(val);
                        val = (/** @type {?} */ (this._options.afterDeserialize))(newVal, key);
                    }
                    catch (e) {
                        console.error('Error ocurred while deserializing the store value, falling back to empty object.');
                        val = {};
                    }
                    if (this._options.migrations) {
                        this._options.migrations.forEach((/**
                         * @param {?} strategy
                         * @return {?}
                         */
                        strategy => {
                            /** @type {?} */
                            const versionMatch = strategy.version === getValue(val, strategy.versionKey || 'version');
                            /** @type {?} */
                            const keyMatch = (!strategy.key && isMaster) || strategy.key === key;
                            if (versionMatch && keyMatch) {
                                val = strategy.migrate(val);
                                hasMigration = true;
                            }
                        }));
                    }
                    if (!isMaster) {
                        state = setValue(state, (/** @type {?} */ (key)), val);
                    }
                    else {
                        state = Object.assign({}, state, val);
                    }
                }
            }
        }
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        nextState => {
            if (!isInitAction || (isInitAction && hasMigration)) {
                for (const key of keys) {
                    /** @type {?} */
                    let val = nextState;
                    if (key !== DEFAULT_STATE_KEY) {
                        val = getValue(nextState, (/** @type {?} */ (key)));
                    }
                    try {
                        /** @type {?} */
                        const newVal = (/** @type {?} */ (this._options.beforeSerialize))(val, key);
                        this._engine.setItem((/** @type {?} */ (key)), (/** @type {?} */ (this._options.serialize))(newVal));
                    }
                    catch (e) {
                        console.error('Error ocurred while serializing the store value, value not updated.');
                    }
                }
            }
        })));
    }
}
NgxsStoragePlugin.ɵfac = function NgxsStoragePlugin_Factory(t) { return new (t || NgxsStoragePlugin)(ɵngcc0.ɵɵinject(NGXS_STORAGE_PLUGIN_OPTIONS), ɵngcc0.ɵɵinject(STORAGE_ENGINE), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
NgxsStoragePlugin.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxsStoragePlugin, factory: NgxsStoragePlugin.ɵfac });
/** @nocollapse */
NgxsStoragePlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGXS_STORAGE_PLUGIN_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STORAGE_ENGINE,] }] },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsStoragePlugin, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NGXS_STORAGE_PLUGIN_OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [STORAGE_ENGINE]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._engine;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._platformId;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,