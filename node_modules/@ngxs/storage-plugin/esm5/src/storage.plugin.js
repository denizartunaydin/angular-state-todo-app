/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { PLATFORM_ID, Inject, Injectable } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { setValue, getValue, InitState, UpdateState, actionMatcher } from '@ngxs/store';
import { tap } from 'rxjs/operators';
import { STORAGE_ENGINE, NGXS_STORAGE_PLUGIN_OPTIONS } from './symbols';
import { DEFAULT_STATE_KEY } from './internals';
import * as ɵngcc0 from '@angular/core';
var NgxsStoragePlugin = /** @class */ (function () {
    function NgxsStoragePlugin(_options, _engine, _platformId) {
        this._options = _options;
        this._engine = _engine;
        this._platformId = _platformId;
    }
    /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    NgxsStoragePlugin.prototype.handle = /**
     * @param {?} state
     * @param {?} event
     * @param {?} next
     * @return {?}
     */
    function (state, event, next) {
        var _this = this;
        var e_1, _a;
        if (isPlatformServer(this._platformId) && this._engine === null) {
            return next(state, event);
        }
        // We cast to `string[]` here as we're sure that this option has been
        // transformed by the `storageOptionsFactory` function that provided token
        /** @type {?} */
        var keys = (/** @type {?} */ (this._options.key));
        /** @type {?} */
        var matches = actionMatcher(event);
        /** @type {?} */
        var isInitAction = matches(InitState) || matches(UpdateState);
        /** @type {?} */
        var hasMigration = false;
        if (isInitAction) {
            var _loop_1 = function (key) {
                /** @type {?} */
                var isMaster = key === DEFAULT_STATE_KEY;
                /** @type {?} */
                var val = this_1._engine.getItem((/** @type {?} */ (key)));
                if (val !== 'undefined' && typeof val !== 'undefined' && val !== null) {
                    try {
                        /** @type {?} */
                        var newVal = (/** @type {?} */ (this_1._options.deserialize))(val);
                        val = (/** @type {?} */ (this_1._options.afterDeserialize))(newVal, key);
                    }
                    catch (e) {
                        console.error('Error ocurred while deserializing the store value, falling back to empty object.');
                        val = {};
                    }
                    if (this_1._options.migrations) {
                        this_1._options.migrations.forEach((/**
                         * @param {?} strategy
                         * @return {?}
                         */
                        function (strategy) {
                            /** @type {?} */
                            var versionMatch = strategy.version === getValue(val, strategy.versionKey || 'version');
                            /** @type {?} */
                            var keyMatch = (!strategy.key && isMaster) || strategy.key === key;
                            if (versionMatch && keyMatch) {
                                val = strategy.migrate(val);
                                hasMigration = true;
                            }
                        }));
                    }
                    if (!isMaster) {
                        state = setValue(state, (/** @type {?} */ (key)), val);
                    }
                    else {
                        state = tslib_1.__assign({}, state, val);
                    }
                }
            };
            var this_1 = this;
            try {
                for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    _loop_1(key);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return next(state, event).pipe(tap((/**
         * @param {?} nextState
         * @return {?}
         */
        function (nextState) {
            var e_2, _a;
            if (!isInitAction || (isInitAction && hasMigration)) {
                try {
                    for (var keys_2 = tslib_1.__values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
                        var key = keys_2_1.value;
                        /** @type {?} */
                        var val = nextState;
                        if (key !== DEFAULT_STATE_KEY) {
                            val = getValue(nextState, (/** @type {?} */ (key)));
                        }
                        try {
                            /** @type {?} */
                            var newVal = (/** @type {?} */ (_this._options.beforeSerialize))(val, key);
                            _this._engine.setItem((/** @type {?} */ (key)), (/** @type {?} */ (_this._options.serialize))(newVal));
                        }
                        catch (e) {
                            console.error('Error ocurred while serializing the store value, value not updated.');
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (keys_2_1 && !keys_2_1.done && (_a = keys_2.return)) _a.call(keys_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        })));
    };
    /** @nocollapse */
    NgxsStoragePlugin.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_STORAGE_PLUGIN_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STORAGE_ENGINE,] }] },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
NgxsStoragePlugin.ɵfac = function NgxsStoragePlugin_Factory(t) { return new (t || NgxsStoragePlugin)(ɵngcc0.ɵɵinject(NGXS_STORAGE_PLUGIN_OPTIONS), ɵngcc0.ɵɵinject(STORAGE_ENGINE), ɵngcc0.ɵɵinject(PLATFORM_ID)); };
NgxsStoragePlugin.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxsStoragePlugin, factory: function (t) { return NgxsStoragePlugin.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsStoragePlugin, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NGXS_STORAGE_PLUGIN_OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [STORAGE_ENGINE]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
    return NgxsStoragePlugin;
}());
export { NgxsStoragePlugin };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._engine;
    /**
     * @type {?}
     * @private
     */
    NgxsStoragePlugin.prototype._platformId;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,