import { Injector, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxsConfig } from '../symbols';
import { MappedStore, StateClassInternal, StatesAndDefaults, StatesByName, RuntimeSelectorContext } from './internals';
import { InternalActions } from '../actions-stream';
import { InternalDispatchedActionResults } from '../internal/dispatcher';
import { StateContextFactory } from '../internal/state-context-factory';
/**
 * State factory class
 * @ignore
 */
import * as ɵngcc0 from '@angular/core';
export declare class StateFactory implements OnDestroy {
    private _injector;
    private _config;
    private _parentFactory;
    private _actions;
    private _actionResults;
    private _stateContextFactory;
    private _initialState;
    private _actionsSubscription;
    constructor(_injector: Injector, _config: NgxsConfig, _parentFactory: StateFactory, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _stateContextFactory: StateContextFactory, _initialState: any);
    private _states;
    readonly states: MappedStore[];
    private _statesByName;
    readonly statesByName: StatesByName;
    private _statePaths;
    private readonly statePaths;
    getRuntimeSelectorContext: () => RuntimeSelectorContext;
    private static cloneDefaults;
    private static checkStatesAreValid;
    ngOnDestroy(): void;
    /**
     * Add a new state to the global defs.
     */
    add(stateClasses: StateClassInternal[]): MappedStore[];
    /**
     * Add a set of states to the store and return the defaults
     */
    addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults;
    /**
     * Bind the actions to the handlers
     */
    connectActionHandlers(): void;
    /**
     * Invoke actions on the states.
     */
    invokeActions(actions$: InternalActions, action: any): Observable<{}[]>;
    private addToStatesMap;
    private addRuntimeInfoToMeta;
    /**
     * @description
     * the method checks if the state has already been added to the tree
     * and completed the life cycle
     * @param name
     * @param path
     */
    private hasBeenMountedAndBootstrapped;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StateFactory, [null, null, { optional: true; skipSelf: true; }, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<StateFactory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtZmFjdG9yeS5kLnRzIiwic291cmNlcyI6WyJzdGF0ZS1mYWN0b3J5LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTmd4c0NvbmZpZyB9IGZyb20gJy4uL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBNYXBwZWRTdG9yZSwgU3RhdGVDbGFzc0ludGVybmFsLCBTdGF0ZXNBbmREZWZhdWx0cywgU3RhdGVzQnlOYW1lLCBSdW50aW1lU2VsZWN0b3JDb250ZXh0IH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBJbnRlcm5hbEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zLXN0cmVhbSc7XHJcbmltcG9ydCB7IEludGVybmFsRGlzcGF0Y2hlZEFjdGlvblJlc3VsdHMgfSBmcm9tICcuLi9pbnRlcm5hbC9kaXNwYXRjaGVyJztcclxuaW1wb3J0IHsgU3RhdGVDb250ZXh0RmFjdG9yeSB9IGZyb20gJy4uL2ludGVybmFsL3N0YXRlLWNvbnRleHQtZmFjdG9yeSc7XHJcbi8qKlxyXG4gKiBTdGF0ZSBmYWN0b3J5IGNsYXNzXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0YXRlRmFjdG9yeSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIF9pbmplY3RvcjtcclxuICAgIHByaXZhdGUgX2NvbmZpZztcclxuICAgIHByaXZhdGUgX3BhcmVudEZhY3Rvcnk7XHJcbiAgICBwcml2YXRlIF9hY3Rpb25zO1xyXG4gICAgcHJpdmF0ZSBfYWN0aW9uUmVzdWx0cztcclxuICAgIHByaXZhdGUgX3N0YXRlQ29udGV4dEZhY3Rvcnk7XHJcbiAgICBwcml2YXRlIF9pbml0aWFsU3RhdGU7XHJcbiAgICBwcml2YXRlIF9hY3Rpb25zU3Vic2NyaXB0aW9uO1xyXG4gICAgY29uc3RydWN0b3IoX2luamVjdG9yOiBJbmplY3RvciwgX2NvbmZpZzogTmd4c0NvbmZpZywgX3BhcmVudEZhY3Rvcnk6IFN0YXRlRmFjdG9yeSwgX2FjdGlvbnM6IEludGVybmFsQWN0aW9ucywgX2FjdGlvblJlc3VsdHM6IEludGVybmFsRGlzcGF0Y2hlZEFjdGlvblJlc3VsdHMsIF9zdGF0ZUNvbnRleHRGYWN0b3J5OiBTdGF0ZUNvbnRleHRGYWN0b3J5LCBfaW5pdGlhbFN0YXRlOiBhbnkpO1xyXG4gICAgcHJpdmF0ZSBfc3RhdGVzO1xyXG4gICAgcmVhZG9ubHkgc3RhdGVzOiBNYXBwZWRTdG9yZVtdO1xyXG4gICAgcHJpdmF0ZSBfc3RhdGVzQnlOYW1lO1xyXG4gICAgcmVhZG9ubHkgc3RhdGVzQnlOYW1lOiBTdGF0ZXNCeU5hbWU7XHJcbiAgICBwcml2YXRlIF9zdGF0ZVBhdGhzO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0ZVBhdGhzO1xyXG4gICAgZ2V0UnVudGltZVNlbGVjdG9yQ29udGV4dDogKCkgPT4gUnVudGltZVNlbGVjdG9yQ29udGV4dDtcclxuICAgIHByaXZhdGUgc3RhdGljIGNsb25lRGVmYXVsdHM7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBjaGVja1N0YXRlc0FyZVZhbGlkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IHN0YXRlIHRvIHRoZSBnbG9iYWwgZGVmcy5cclxuICAgICAqL1xyXG4gICAgYWRkKHN0YXRlQ2xhc3NlczogU3RhdGVDbGFzc0ludGVybmFsW10pOiBNYXBwZWRTdG9yZVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBzZXQgb2Ygc3RhdGVzIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIHRoZSBkZWZhdWx0c1xyXG4gICAgICovXHJcbiAgICBhZGRBbmRSZXR1cm5EZWZhdWx0cyhzdGF0ZUNsYXNzZXM6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdKTogU3RhdGVzQW5kRGVmYXVsdHM7XHJcbiAgICAvKipcclxuICAgICAqIEJpbmQgdGhlIGFjdGlvbnMgdG8gdGhlIGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3RBY3Rpb25IYW5kbGVycygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2UgYWN0aW9ucyBvbiB0aGUgc3RhdGVzLlxyXG4gICAgICovXHJcbiAgICBpbnZva2VBY3Rpb25zKGFjdGlvbnMkOiBJbnRlcm5hbEFjdGlvbnMsIGFjdGlvbjogYW55KTogT2JzZXJ2YWJsZTx7fVtdPjtcclxuICAgIHByaXZhdGUgYWRkVG9TdGF0ZXNNYXA7XHJcbiAgICBwcml2YXRlIGFkZFJ1bnRpbWVJbmZvVG9NZXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIHRoZSBtZXRob2QgY2hlY2tzIGlmIHRoZSBzdGF0ZSBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIHRoZSB0cmVlXHJcbiAgICAgKiBhbmQgY29tcGxldGVkIHRoZSBsaWZlIGN5Y2xlXHJcbiAgICAgKiBAcGFyYW0gbmFtZVxyXG4gICAgICogQHBhcmFtIHBhdGhcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYXNCZWVuTW91bnRlZEFuZEJvb3RzdHJhcHBlZDtcclxufVxyXG4iXX0=