{"version":3,"file":"ngxs-store.js","sources":["ng:/@ngxs/store/src/configs/messages.config.ts","ng:/@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng:/@ngxs/store/src/symbols.ts","ng:/@ngxs/store/src/execution/symbols.ts","ng:/@ngxs/store/src/utils/utils.ts","ng:/@ngxs/store/src/internal/internals.ts","ng:/@ngxs/store/src/operators/of-action.ts","ng:/@ngxs/store/src/operators/leave-ngxs.ts","ng:/@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng:/@ngxs/store/src/actions-stream.ts","ng:/@ngxs/store/src/utils/compose.ts","ng:/@ngxs/store/src/internal/state-stream.ts","ng:/@ngxs/store/src/plugin-manager.ts","ng:/@ngxs/store/src/internal/dispatcher.ts","ng:/@ngxs/store/src/utils/freeze.ts","ng:/@ngxs/store/src/host-environment/host-environment.ts","ng:/@ngxs/store/src/internal/config-validator.ts","ng:/@ngxs/store/src/internal/state-operations.ts","ng:/@ngxs/store/src/internal/state-operators.ts","ng:/@ngxs/store/src/internal/state-context-factory.ts","ng:/@ngxs/store/src/utils/store-validators.ts","ng:/@ngxs/store/src/internal/state-factory.ts","ng:/@ngxs/store/src/internal/lifecycle-state-manager.ts","ng:/@ngxs/store/src/utils/selector-utils.ts","ng:/@ngxs/store/src/store.ts","ng:/@ngxs/store/src/decorators/select/select-factory.ts","ng:/@ngxs/store/src/actions/actions.ts","ng:/@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","ng:/@ngxs/store/src/modules/ngxs-root.module.ts","ng:/@ngxs/store/src/modules/ngxs-feature.module.ts","ng:/@ngxs/store/src/module.ts","ng:/@ngxs/store/src/decorators/action.ts","ng:/@ngxs/store/src/ivy/ensure-state-class-is-injectable.ts","ng:/@ngxs/store/src/decorators/state.ts","ng:/@ngxs/store/src/decorators/select/symbols.ts","ng:/@ngxs/store/src/decorators/select/select.ts","ng:/@ngxs/store/src/decorators/selector-options.ts","ng:/@ngxs/store/src/public_to_deprecate.ts","ng:/@ngxs/store/src/decorators/selector/selector.ts","ng:/@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","ng:/@ngxs/store/src/state-token/state-token.ts"],"names":["isObject","tslib_1.__extends","MESSAGES","CODE","tslib_1.__values","MetaDataModel","SelectorMetaDataModel","ensureStoreMetadata","ensureStoreMetadataInternal","getStoreMetadata","getStoreMetadataInternal","ensureSelectorMetadata","ensureSelectorMetadataInternal","getSelectorMetadata","getSelectorMetadataInternal"],"mappings":"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","sourcesContent":["export enum VALIDATION_CODE {\r\n  STATE_NAME = 'STATE_NAME',\r\n  STATE_UNIQUE = 'STATE_UNIQUE',\r\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\r\n  STATE_DECORATOR = 'STATE_DECORATOR',\r\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\r\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\r\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\r\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\r\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR',\r\n  ZONE_WARNING = 'ZONE_WARNING',\r\n  PATCHING_ARRAY = 'PATCHING_ARRAY',\r\n  PATCHING_PRIMITIVE = 'PATCHING_PRIMITIVE',\r\n  UNDECORATED_STATE_IN_IVY = 'UNDECORATED_STATE_IN_IVY'\r\n}\r\n\r\nexport const CONFIG_MESSAGES = {\r\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\r\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\r\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\r\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\r\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\r\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\r\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\r\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\r\n    'You have forgotten to import the NGXS module!',\r\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\r\n    '@Action() decorator cannot be used with static methods',\r\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods',\r\n  [VALIDATION_CODE.ZONE_WARNING]: () =>\r\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })',\r\n  [VALIDATION_CODE.PATCHING_ARRAY]: () => 'Patching arrays is not supported.',\r\n  [VALIDATION_CODE.PATCHING_PRIMITIVE]: () => 'Patching primitives is not supported.',\r\n  [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (name: string) =>\r\n    `'${name}' class should be decorated with @Injectable() right after the @State() decorator`\r\n};\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n    // to be used outside of the core Angular code, thus we just have\r\n    // to check if the zone doesn't extend or instanceof `NgZone`\r\n    if (ngZone instanceof NgZone) {\r\n      return;\r\n    }\r\n\r\n    console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions, Callback } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport const NG_TEST_MODE = new InjectionToken<Callback<boolean>>('NG_TEST_MODE');\r\nexport const NG_DEV_MODE = new InjectionToken<Callback<boolean>>('NG_DEV_MODE');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\r\n  Partial<NgxsOnInit> &\r\n  Partial<NgxsAfterBootstrap>;\r\n\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: PlainObject = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string | StateToken<T>;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: StateClass[];\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n */\r\nexport class NgxsSimpleChange<T = any> {\r\n  constructor(\r\n    public readonly previousValue: T,\r\n    public readonly currentValue: T,\r\n    public readonly firstChange: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * On change interface\r\n */\r\nexport interface NgxsOnChanges {\r\n  ngxsOnChanges(change: NgxsSimpleChange): void;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  } else {\r\n    return action.type;\r\n  }\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n\r\n/**\r\n * Simple object check.\r\n *\r\n *    isObject({a:1}) //=> true\r\n *    isObject(1) //=> false\r\n *\r\n * @ignore\r\n */\r\nexport const isObject = (item: any) => {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n};\r\n\r\n/**\r\n * Deep merge two objects.\r\n *\r\n *    mergeDeep({a:1, b:{x: 1, y:2}}, {b:{x: 3}, c:4}) //=> {a:1, b:{x:3, y:2}, c:4}\r\n *\r\n * @param base base object onto which `sources` will be applied\r\n */\r\nexport const mergeDeep = (base: any, ...sources: any[]): any => {\r\n  if (!sources.length) return base;\r\n  const source = sources.shift();\r\n\r\n  if (isObject(base) && isObject(source)) {\r\n    for (const key in source) {\r\n      if (isObject(source[key])) {\r\n        if (!base[key]) Object.assign(base, { [key]: {} });\r\n        mergeDeep(base[key], source[key]);\r\n      } else {\r\n        Object.assign(base, { [key]: source[key] });\r\n      }\r\n    }\r\n  }\r\n\r\n  return mergeDeep(base, ...sources);\r\n};\r\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  NgxsSimpleChange,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\nimport { getValue } from '../utils/utils';\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = PlainObjectOf<string[]>;\r\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actionOrActions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  makeRootSelector: SelectorFactory | null;\r\n  children?: StateClassInternal[];\r\n}\r\n\r\nexport interface RuntimeSelectorContext {\r\n  getStateGetter(key: any): (state: any) => any;\r\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\r\n}\r\n\r\nexport type SelectFromRootState = (rootState: any) => any;\r\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  makeRootSelector: SelectorFactory | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  isInitialised: boolean;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  path: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\r\n\r\nexport interface RootStateDiff<T> {\r\n  currentAppState: T;\r\n  newAppState: T;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      makeRootSelector(context: RuntimeSelectorContext) {\r\n        return context.getStateGetter(defaultMetadata.name);\r\n      },\r\n      children: []\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      makeRootSelector: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\r\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\r\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: PlainObjectOf<string> = {}\r\n): PlainObjectOf<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: PlainObjectOf<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nexport function getStateDiffChanges<T>(\r\n  mappedStore: MappedStore,\r\n  diff: RootStateDiff<T>\r\n): NgxsSimpleChange {\r\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\r\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\r\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\n\r\nimport { ActionType } from '../actions/symbols';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T = any>(allowedType: ActionType): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T = any>(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, ActionCompletion> {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(\r\n  ...allowedTypes: ActionType[]\r\n): OperatorFunction<ActionContext, any> {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator(\r\n  allowedTypes: ActionType[],\r\n  statuses?: ActionStatus[],\r\n  // This actually could've been `OperatorFunction<ActionContext, ActionCompletion | any>`,\r\n  // since it maps either to `ctx.action` OR to `ActionCompletion`. But `ActionCompleteion | any`\r\n  // defaults to `any`, thus there is no sense from union type.\r\n  mapOperator: () => OperatorFunction<ActionContext, any> = mapAction\r\n): OperatorFunction<ActionContext, any> {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(filterStatus(allowedMap, allowedStatusMap), mapOperator());\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: ActionType[]): FilterMap {\r\n  return types.reduce((filterMap: FilterMap, klass: any) => {\r\n    filterMap[getActionTypeFromInstance(klass)!] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce((filterMap: FilterMap, status: ActionStatus) => {\r\n    filterMap[status] = true;\r\n    return filterMap;\r\n  }, <FilterMap>{});\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n  constructor(\r\n    internalActions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      const childSubscription = internalActions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe({\r\n          next: ctx => observer.next(ctx),\r\n          error: error => observer.error(error),\r\n          complete: () => observer.complete()\r\n        });\r\n\r\n      observer.add(childSubscription);\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<PlainObject> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\r\n\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private get rootPlugins(): NgxsPluginFn[] {\r\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\r\n    this.rootPlugins.push(...pluginHandlers);\r\n  }\r\n\r\n  private getPluginHandlers(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => {\r\n          try {\r\n            this._errorHandler.handleError(error);\r\n          } catch {}\r\n        })\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\r\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const type: string | undefined = getActionTypeFromInstance(action);\r\n    if (!type) {\r\n      const error = new Error(\r\n        `This action doesn't have a type property: ${action.constructor.name}`\r\n      );\r\n      return throwError(error);\r\n    }\r\n\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\r\nimport { Callback } from '../internal/internals';\r\n\r\n@Injectable()\r\nexport class HostEnvironment {\r\n  constructor(\r\n    @Inject(NG_DEV_MODE) public isDevMode: Callback<boolean>,\r\n    @Inject(NG_TEST_MODE) public isTestMode: Callback<boolean>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { HostEnvironment } from '../host-environment/host-environment';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\r\n\r\n  private get isIncorrectProduction(): boolean {\r\n    return !this._host.isDevMode() && this._config.developmentMode;\r\n  }\r\n\r\n  private get isIncorrectDevelopment(): boolean {\r\n    return this._host.isDevMode() && !this._config.developmentMode;\r\n  }\r\n\r\n  public verifyDevMode(): void {\r\n    if (this._host.isTestMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.isIncorrectProduction) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\r\n    } else if (this.isIncorrectDevelopment) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\nimport { ConfigValidator } from '../internal/config-validator';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actionOrActions: any | any[]) => this._dispatcher.dispatch(actionOrActions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    if (Array.isArray(val)) {\r\n      throw new Error(MESSAGES[CODE.PATCHING_ARRAY]());\r\n    } else if (typeof val !== 'object') {\r\n      throw new Error(MESSAGES[CODE.PATCHING_PRIMITIVE]());\r\n    }\r\n\r\n    const newState: any = { ...(existingState as any) };\r\n    for (const key in val) {\r\n      // deep clone for patch compatibility\r\n      // noinspection JSUnfilteredForInLoop (IDE)\r\n      newState[key] = (val as any)[key];\r\n    }\r\n\r\n    return newState as T;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\r\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, mappedStore.path);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(change);\r\n      }\r\n\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClassInternal,\r\n  StatesByName\r\n} from '../internal/internals';\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return MESSAGES[CODE.STATE_NAME](name);\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string | null) {\r\n    if (!name) {\r\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject, OnDestroy } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError, Subscription } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort,\r\n  RuntimeSelectorContext,\r\n  SharedSelectorOptions\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory implements OnDestroy {\r\n  private _actionsSubscription: Subscription | null = null;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private _statePaths: PlainObjectOf<string> = {};\r\n\r\n  private get statePaths(): PlainObjectOf<string> {\r\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\r\n  }\r\n\r\n  getRuntimeSelectorContext = memoize(() => {\r\n    const stateFactory = this;\r\n\r\n    function resolveGetter(key: string) {\r\n      const path = stateFactory.statePaths[key];\r\n      return path ? propGetter(path.split('.'), stateFactory._config) : null;\r\n    }\r\n\r\n    const context: RuntimeSelectorContext = this._parentFactory\r\n      ? this._parentFactory.getRuntimeSelectorContext()\r\n      : {\r\n          getStateGetter(key: string) {\r\n            let getter = resolveGetter(key);\r\n            if (getter) {\r\n              return getter;\r\n            }\r\n            return (...args) => {\r\n              // Late loaded getter\r\n              if (!getter) {\r\n                getter = resolveGetter(key);\r\n              }\r\n              return getter ? getter(...args) : undefined;\r\n            };\r\n          },\r\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\r\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\r\n            return {\r\n              ...globalSelectorOptions,\r\n              ...(localOptions || {})\r\n            };\r\n          }\r\n        };\r\n    return context;\r\n  });\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // I'm using non-null assertion here since `_actionsSubscrition` will\r\n    // be 100% defined. This is because `ngOnDestroy()` cannot be invoked\r\n    // on the `StateFactory` until its initialized :) An it's initialized\r\n    // for the first time along with the `NgxsRootModule`.\r\n    this._actionsSubscription!.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const path: string = paths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, path);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        path,\r\n        isInitialised: false,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const mappedStores: MappedStore[] = this.add(classes);\r\n    const defaults = mappedStores.reduce(\r\n      (result: any, mappedStore: MappedStore) =>\r\n        setValue(result, mappedStore.path, mappedStore.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states: mappedStores };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._actionsSubscription !== null) return;\r\n    this._actionsSubscription = this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const type = getActionTypeFromInstance(action)!;\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              // If this observable has been completed w/o emitting\r\n              // any value then we wouldn't want to complete the whole chain\r\n              // of actions. Since if any observable completes then\r\n              // action will be canceled.\r\n              // For instance if any action handler would've had such statement:\r\n              // `handler(ctx) { return EMPTY; }`\r\n              // then the action will be canceled.\r\n              // See https://github.com/ngxs/store/issues/1568\r\n              result = result.pipe(defaultIfEmpty({}));\r\n\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\r\n    this.statePaths[meta.name!] = path;\r\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\r\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\r\n    // We will need to come up with an alternative in v4 because this is used by many plugins\r\n    meta.path = path;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\r\nimport { filter, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => this.invokeBootstrap(results!.states));\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(mappedStores: MappedStore[]): void {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const currentAppState: PlainObject = {};\r\n        const newAppState: PlainObject = this.internalStateOperations\r\n          .getRootStateOperations()\r\n          .getState();\r\n\r\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(firstDiffChange);\r\n      }\r\n\r\n      if (instance.ngxsOnInit) {\r\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n      }\r\n\r\n      mappedStore.isInitialised = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(mappedStores: MappedStore[]) {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n      if (instance.ngxsAfterBootstrap) {\r\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\r\n    return this.stateContextFactory.createStateContext(mappedStore);\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions,\r\n  RuntimeSelectorContext,\r\n  SelectorFactory,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: SelectFromRootState[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  Object.setPrototypeOf(memoizedFn, originalFn);\r\n\r\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\r\n\r\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\r\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\r\n      context,\r\n      selectorMetaData,\r\n      selectors\r\n    );\r\n\r\n    return function selectFromRoot(rootState: any) {\r\n      // Determine arguments from the app state using the selectors\r\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\r\n\r\n      // if the lambda tries to access a something on the\r\n      // state that doesn't exist, it will throw a TypeError.\r\n      // since this is quite usual behaviour, we simply return undefined if so.\r\n      try {\r\n        return memoizedFn(...results);\r\n      } catch (ex) {\r\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\r\n          return undefined;\r\n        }\r\n\r\n        throw ex;\r\n      }\r\n    };\r\n  };\r\n\r\n  selectorMetaData.makeRootSelector = makeRootSelector;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  context: RuntimeSelectorContext,\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\r\n  const selectorsToApply = getSelectorsToApply(\r\n    selectors,\r\n    selectorOptions,\r\n    selectorMetaData.containerClass\r\n  );\r\n\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\r\n    const factory = getRootSelectorFactory(selector);\r\n    return factory(context);\r\n  });\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getLocalSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  return {\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectors: any[] | undefined = [],\r\n  selectorOptions: SharedSelectorOptions,\r\n  containerClass: any\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorOptions.injectContainerState;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the factory function to create the selector to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.makeRootSelector) || (() => selector);\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getRootSelectorFactory } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\nimport { StateFactory } from './internal/state-factory';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    private _stateFactory: StateFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select<T>(selector: StateToken<T>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot<T>(selector: StateToken<T>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private getStoreBoundSelectorFn(selector: any) {\r\n    const makeSelectorFn = getRootSelectorFactory(selector);\r\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\r\n    return makeSelectorFn(runtimeContext);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: PlainObject = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: PlainObject = defaultStateNotEmpty\r\n        ? { ...this._config.defaultsState, ...initialStateValue }\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @internal only use in @Select decorator\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory implements OnDestroy {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    SelectFactory.store = null;\r\n    SelectFactory.config = null;\r\n  }\r\n}\r\n","import { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: PlainObject) {}\r\n}\r\n","import { isDevMode } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\n\r\nexport const ivyEnabledInDevMode$ = new ReplaySubject<boolean>(1);\r\n\r\n/**\r\n * Ivy exposes helper functions to the global `window.ng` object.\r\n * Those functions are `getComponent, getContext,\r\n * getListeners, getViewComponent, getHostElement, getInjector,\r\n * getRootComponents, getDirectives, getDebugNode`\r\n * Previously, old view engine exposed `window.ng.coreTokens` and\r\n * `window.ng.probe` if an application was in development/production.\r\n * Ivy doesn't expose these functions in production. Developers will be able\r\n * to see warnings in both JIT/AOT modes, but only if an application\r\n * is in development.\r\n */\r\nexport function setIvyEnabledInDevMode(): void {\r\n  try {\r\n    // `try-catch` will also handle server-side rendering, as\r\n    // `window is not defined` will not be thrown.\r\n    const ng = (window as any).ng;\r\n    const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;\r\n    const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();\r\n    ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\r\n  } catch {\r\n    ivyEnabledInDevMode$.next(false);\r\n  } finally {\r\n    ivyEnabledInDevMode$.complete();\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { ROOT_STATE_TOKEN } from '../symbols';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\nimport { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    _select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Validate states on having the `@Injectable()` decorator in Ivy\r\n    setIvyEnabledInDevMode();\r\n\r\n    // Add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // Connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // Dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport {\r\n  INITIAL_STATE_TOKEN,\r\n  InitialState,\r\n  isAngularInTestMode,\r\n  NGXS_STATE_CONTEXT_FACTORY,\r\n  NGXS_STATE_FACTORY,\r\n  NgxsBootstrapper,\r\n  StateClass\r\n} from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NG_DEV_MODE,\r\n  NG_TEST_MODE,\r\n  NgxsConfig,\r\n  NgxsModuleOptions,\r\n  ROOT_STATE_TOKEN\r\n} from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select/select-factory';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { HostEnvironment } from './host-environment/host-environment';\r\nimport { ConfigValidator } from './internal/config-validator';\r\nimport { mergeDeep } from './utils/utils';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders<NgxsRootModule> {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        HostEnvironment,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: NG_TEST_MODE,\r\n        useValue: isAngularInTestMode\r\n      },\r\n      {\r\n        provide: NG_DEV_MODE,\r\n        useValue: isDevMode\r\n      },\r\n      {\r\n        provide: NGXS_EXECUTION_STRATEGY,\r\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      },\r\n      {\r\n        provide: NGXS_STATE_CONTEXT_FACTORY,\r\n        useExisting: StateContextFactory\r\n      },\r\n      {\r\n        provide: NGXS_STATE_FACTORY,\r\n        useExisting: StateFactory\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return mergeDeep(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n    if (isStaticMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { ivyEnabledInDevMode$ } from './ivy-enabled-in-dev-mode';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * All provided or injected tokens must have `@Injectable` decorator\r\n * (previously, injected tokens without `@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n */\r\nexport function ensureStateClassIsInjectable(target: any): void {\r\n  // `Éµprov` is a static property added by the NGCC compiler. It always exists in\r\n  // AOT mode because this property is added before runtime. If an application is running in\r\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n  ivyEnabledInDevMode$.subscribe(_ivyEnabledInDevMode => {\r\n    if (_ivyEnabledInDevMode) {\r\n      const ngInjectableDef = target.Éµprov;\r\n      if (!ngInjectableDef) {\r\n        // Don't warn if Ivy is disabled or `Éµprov` exists on the class\r\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { StateClass } from '@ngxs/store/internals';\r\n\r\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { ensureStateClassIsInjectable } from '../ivy/ensure-state-class-is-injectable';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    const stateName: string | null =\r\n      typeof name === 'string' ? name : (name && name.getName()) || null;\r\n    StoreValidators.checkCorrectStateName(stateName);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = stateName;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    ensureStateClassIsInjectable(target);\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { StateToken } from '../../state-token/state-token';\r\nimport { ExtractTokenType } from '../../state-token/symbols';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\r\n  if (!SelectFactory.store) {\r\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n  }\r\n\r\n  return SelectFactory.store.select(selector);\r\n}\r\n\r\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\r\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n\r\n  if (typeof rawSelector === 'string') {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n    return propGetter(propsArray, SelectFactory.config!);\r\n  }\r\n\r\n  return rawSelector;\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n\r\nexport type PropertyType<T> = T extends StateToken<any>\r\n  ? Observable<ExtractTokenType<T>>\r\n  : T extends (...args: any[]) => any\r\n  ? Observable<ReturnType<T>>\r\n  : any;\r\n","import { createSelectObservable, createSelectorFn, PropertyType } from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select<T>(rawSelector?: T, ...paths: string[]): PropertyDecorator {\r\n  return function(target, key): void {\r\n    const name: string = key.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    const selector = createSelectorFn(name, rawSelector, paths);\r\n\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get(): PropertyType<T> {\r\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import {\r\n  getSelectorMetadata as getSelectorMetadataInternal,\r\n  getStoreMetadata as getStoreMetadataInternal,\r\n  ensureStoreMetadata as ensureStoreMetadataInternal,\r\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\r\n  StateClassInternal,\r\n  SharedSelectorOptions\r\n} from './internal/internals';\r\nimport { PlainObjectOf } from '../internals/src/symbols';\r\nimport { ActionHandlerMetaData } from './actions/symbols';\r\n\r\ninterface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  children?: StateClassInternal[];\r\n}\r\n\r\ninterface SelectorMetaDataModel {\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return ensureStoreMetadataInternal(target);\r\n}\r\n\r\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return getStoreMetadataInternal(target);\r\n}\r\n\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  return ensureSelectorMetadataInternal(target);\r\n}\r\n\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return getSelectorMetadataInternal(target);\r\n}\r\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { createSelector } from '../../utils/selector-utils';\r\nimport { SelectorSpec, SelectorType } from './symbols';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\r\n  return <U>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\r\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\r\n    const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n    if (isNotMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    const memoizedFn = createSelector(selectors, originalFn as any, {\r\n      containerClass: target,\r\n      selectorName: key.toString(),\r\n      getSelectorOptions() {\r\n        return {};\r\n      }\r\n    });\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { TokenName } from './symbols';\r\nimport {\r\n  ensureSelectorMetadata,\r\n  RuntimeSelectorContext,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nexport class StateToken<T = void> {\r\n  constructor(private readonly name: TokenName<T>) {\r\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\r\n    selectorMetadata.makeRootSelector = (\r\n      runtimeContext: RuntimeSelectorContext\r\n    ): SelectFromRootState => {\r\n      return runtimeContext.getStateGetter(this.name);\r\n    };\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  toString(): string {\r\n    return `StateToken[${this.name}]`;\r\n  }\r\n}\r\n"]}