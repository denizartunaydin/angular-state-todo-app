/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export class NgxsBootstrapper {
    constructor() {
        /**
         * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
         */
        this.bootstrap$ = new ReplaySubject(1);
    }
    /**
     * @return {?}
     */
    get appBootstrapped$() {
        return this.bootstrap$.asObservable();
    }
    /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     * @return {?}
     */
    bootstrap() {
        this.bootstrap$.next(true);
        this.bootstrap$.complete();
    }
}
NgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) { return new (t || NgxsBootstrapper)(); };
NgxsBootstrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxsBootstrapper, factory: NgxsBootstrapper.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsBootstrapper, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {
    /**
     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
     * @type {?}
     * @private
     */
    NgxsBootstrapper.prototype.bootstrap$;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1ib290c3RyYXBwZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvbmd4cy1ib290c3RyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFHakQsTUFBTSxPQUFPLGdCQUFnQjtBQUM3QixJQUZBO0FBQ0U7QUFBWTtBQUV1RDtBQUFZLFFBRXZFLGVBQVUsR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztBQUNyRCxJQWFBLENBQUM7QUFDRDtBQUFRO0FBQW1CO0FBQVEsSUFiakMsSUFBSSxnQkFBZ0I7QUFBSyxRQUN2QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDMUMsSUFBRSxDQUFDO0FBQ0g7QUFFQztBQUNFO0FBQ0U7QUFDYTtBQUNkLElBREYsU0FBUztBQUFLLFFBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsUUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9CLElBQUUsQ0FBQztBQUNIOzRDQW5CQyxVQUFVOzs7O2dEQUNUO0FBQUM7QUFBYTtBQUFRO0FBRW1EO0FBQ3RFO0FBQ1U7QUFBUSxJQUFyQixzQ0FBbUQ7O0FBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBY0EsQUFBQSxBQVpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWxCQSxBQUFBLEFBS0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c0Jvb3RzdHJhcHBlciB7XHJcbiAgLyoqXHJcbiAgICogVXNlIGBSZXBsYXlTdWJqZWN0YCwgdGh1cyB3ZSBjYW4gZ2V0IGNhY2hlZCB2YWx1ZSBldmVuIGlmIHRoZSBzdHJlYW0gaXMgY29tcGxldGVkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBib290c3RyYXAkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XHJcblxyXG4gIGdldCBhcHBCb290c3RyYXBwZWQkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYm9vdHN0cmFwJC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZXZlbnQgd2lsbCBiZSBlbWl0dGVkIGFmdGVyIGF0dGFjaGluZyBgQ29tcG9uZW50UmVmYCBvZiB0aGUgcm9vdCBjb21wb25lbnRcclxuICAgKiB0byB0aGUgdHJlZSBvZiB2aWV3cywgdGhhdCdzIGEgc2lnbmFsIHRoYXQgYXBwbGljYXRpb24gaGFzIGJlZW4gZnVsbHkgcmVuZGVyZWRcclxuICAgKi9cclxuICBib290c3RyYXAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmJvb3RzdHJhcCQubmV4dCh0cnVlKTtcclxuICAgIHRoaXMuYm9vdHN0cmFwJC5jb21wbGV0ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=