/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, NgModule, Optional } from '@angular/core';
import { Store } from '../store';
import { InternalStateOperations } from '../internal/state-operations';
import { StateFactory } from '../internal/state-factory';
import { FEATURE_STATE_TOKEN } from '../symbols';
import { LifecycleStateManager } from '../internal/lifecycle-state-manager';
import { UpdateState } from '../actions/actions';
/**
 * Feature module
 * @ignore
 */
import * as ɵngcc0 from '@angular/core';
export class NgxsFeatureModule {
    /**
     * @param {?} _store
     * @param {?} internalStateOperations
     * @param {?} factory
     * @param {?=} states
     * @param {?=} lifecycleStateManager
     */
    constructor(_store, internalStateOperations, factory, states = [], lifecycleStateManager) {
        // Since FEATURE_STATE_TOKEN is a multi token, we need to
        // flatten it [[Feature1State, Feature2State], [Feature3State]]
        /** @type {?} */
        const flattenedStates = NgxsFeatureModule.flattenStates(states);
        // add stores to the state graph and return their defaults
        /** @type {?} */
        const results = factory.addAndReturnDefaults(flattenedStates);
        if (results.states.length) {
            internalStateOperations.setStateToTheCurrentWithNew(results);
            // dispatch the update action and invoke init and bootstrap functions after
            lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);
        }
    }
    /**
     * @private
     * @param {?=} states
     * @return {?}
     */
    static flattenStates(states = []) {
        return states.reduce((/**
         * @param {?} total
         * @param {?} values
         * @return {?}
         */
        (total, values) => total.concat(values)), []);
    }
}
NgxsFeatureModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxsFeatureModule });
NgxsFeatureModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxsFeatureModule_Factory(t) { return new (t || NgxsFeatureModule)(ɵngcc0.ɵɵinject(Store), ɵngcc0.ɵɵinject(InternalStateOperations), ɵngcc0.ɵɵinject(StateFactory), ɵngcc0.ɵɵinject(FEATURE_STATE_TOKEN, 8), ɵngcc0.ɵɵinject(LifecycleStateManager)); } });
/** @nocollapse */
NgxsFeatureModule.ctorParameters = () => [
    { type: Store },
    { type: InternalStateOperations },
    { type: StateFactory },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [FEATURE_STATE_TOKEN,] }] },
    { type: LifecycleStateManager }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsFeatureModule, [{
        type: NgModule
    }], function () { return [{ type: Store }, { type: InternalStateOperations }, { type: StateFactory }, { type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [FEATURE_STATE_TOKEN]
            }] }, { type: LifecycleStateManager }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1mZWF0dXJlLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3N0b3JlL3NyYy9tb2R1bGVzL25neHMtZmVhdHVyZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDakQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFNUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pEO0FBQ0c7QUFDYztBQUNQOztBQUdWLE1BQU0sT0FBTyxpQkFBaUI7QUFDOUI7QUFBUTtBQUNVO0FBQ3VCO0FBQzVCO0FBQ0Q7QUFFUjtBQUFRLElBTlYsWUFDRSxNQUFhLEVBQ2IsdUJBQWdELEVBQ2hELE9BQXFCLEVBR3JCLFNBQWlDLEVBQUUsRUFDbkMscUJBQTRDO0FBQzdDO0FBRUY7QUFDSTtBQUF5QixjQUFwQixlQUFlLEdBQXlCLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7QUFDekY7QUFFRztBQUF5QixjQUFsQixPQUFPLEdBQXNCLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUM7QUFDcEYsUUFDSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQy9CLFlBQU0sdUJBQXVCLENBQUMsMkJBQTJCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDbkUsWUFDTSwyRUFBMkU7QUFDakYsWUFBTSxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RGLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDtBQUNPO0FBQWdCO0FBQTBCO0FBQW1CO0FBQVEsSUFBbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFpQyxFQUFFO0FBQUksUUFDbEUsT0FBTyxNQUFNLENBQUMsTUFBTTtBQUNwQjtBQUE0QjtBQUE2QjtBQUF1QjtBQUMvRSxRQURDLENBQUMsS0FBMkIsRUFBRSxNQUE0QixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUNuRixFQUFFLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIOzZDQWhDQyxRQUFRO2dVQUNQO0FBQUM7QUFBbUI7QUFFTCxZQWZSLEtBQUs7QUFBSSxZQUNULHVCQUF1QjtBQUFJLFlBQzNCLFlBQVk7QUFBSSx3Q0FnQnBCLFFBQVEsWUFDUixNQUFNLFNBQUMsbUJBQW1CO0FBQ3hCLFlBaEJFLHFCQUFxQjtBQUFHOzs7Ozs7Ozs7QUFOQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQS9CQSxBQUFBLEFBWkEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBZ0JBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQWZBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIE5nTW9kdWxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICcuLi9zdG9yZSc7XHJcbmltcG9ydCB7IEludGVybmFsU3RhdGVPcGVyYXRpb25zIH0gZnJvbSAnLi4vaW50ZXJuYWwvc3RhdGUtb3BlcmF0aW9ucyc7XHJcbmltcG9ydCB7IFN0YXRlRmFjdG9yeSB9IGZyb20gJy4uL2ludGVybmFsL3N0YXRlLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBGRUFUVVJFX1NUQVRFX1RPS0VOIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcbmltcG9ydCB7IExpZmVjeWNsZVN0YXRlTWFuYWdlciB9IGZyb20gJy4uL2ludGVybmFsL2xpZmVjeWNsZS1zdGF0ZS1tYW5hZ2VyJztcclxuaW1wb3J0IHsgU3RhdGVDbGFzc0ludGVybmFsLCBTdGF0ZXNBbmREZWZhdWx0cyB9IGZyb20gJy4uL2ludGVybmFsL2ludGVybmFscyc7XHJcbmltcG9ydCB7IFVwZGF0ZVN0YXRlIH0gZnJvbSAnLi4vYWN0aW9ucy9hY3Rpb25zJztcclxuXHJcbi8qKlxyXG4gKiBGZWF0dXJlIG1vZHVsZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5ATmdNb2R1bGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c0ZlYXR1cmVNb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgX3N0b3JlOiBTdG9yZSxcclxuICAgIGludGVybmFsU3RhdGVPcGVyYXRpb25zOiBJbnRlcm5hbFN0YXRlT3BlcmF0aW9ucyxcclxuICAgIGZhY3Rvcnk6IFN0YXRlRmFjdG9yeSxcclxuICAgIEBPcHRpb25hbCgpXHJcbiAgICBASW5qZWN0KEZFQVRVUkVfU1RBVEVfVE9LRU4pXHJcbiAgICBzdGF0ZXM6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdW10gPSBbXSxcclxuICAgIGxpZmVjeWNsZVN0YXRlTWFuYWdlcjogTGlmZWN5Y2xlU3RhdGVNYW5hZ2VyXHJcbiAgKSB7XHJcbiAgICAvLyBTaW5jZSBGRUFUVVJFX1NUQVRFX1RPS0VOIGlzIGEgbXVsdGkgdG9rZW4sIHdlIG5lZWQgdG9cclxuICAgIC8vIGZsYXR0ZW4gaXQgW1tGZWF0dXJlMVN0YXRlLCBGZWF0dXJlMlN0YXRlXSwgW0ZlYXR1cmUzU3RhdGVdXVxyXG4gICAgY29uc3QgZmxhdHRlbmVkU3RhdGVzOiBTdGF0ZUNsYXNzSW50ZXJuYWxbXSA9IE5neHNGZWF0dXJlTW9kdWxlLmZsYXR0ZW5TdGF0ZXMoc3RhdGVzKTtcclxuXHJcbiAgICAvLyBhZGQgc3RvcmVzIHRvIHRoZSBzdGF0ZSBncmFwaCBhbmQgcmV0dXJuIHRoZWlyIGRlZmF1bHRzXHJcbiAgICBjb25zdCByZXN1bHRzOiBTdGF0ZXNBbmREZWZhdWx0cyA9IGZhY3RvcnkuYWRkQW5kUmV0dXJuRGVmYXVsdHMoZmxhdHRlbmVkU3RhdGVzKTtcclxuXHJcbiAgICBpZiAocmVzdWx0cy5zdGF0ZXMubGVuZ3RoKSB7XHJcbiAgICAgIGludGVybmFsU3RhdGVPcGVyYXRpb25zLnNldFN0YXRlVG9UaGVDdXJyZW50V2l0aE5ldyhyZXN1bHRzKTtcclxuXHJcbiAgICAgIC8vIGRpc3BhdGNoIHRoZSB1cGRhdGUgYWN0aW9uIGFuZCBpbnZva2UgaW5pdCBhbmQgYm9vdHN0cmFwIGZ1bmN0aW9ucyBhZnRlclxyXG4gICAgICBsaWZlY3ljbGVTdGF0ZU1hbmFnZXIubmd4c0Jvb3RzdHJhcChuZXcgVXBkYXRlU3RhdGUocmVzdWx0cy5kZWZhdWx0cyksIHJlc3VsdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZmxhdHRlblN0YXRlcyhzdGF0ZXM6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdW10gPSBbXSk6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdIHtcclxuICAgIHJldHVybiBzdGF0ZXMucmVkdWNlKFxyXG4gICAgICAodG90YWw6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdLCB2YWx1ZXM6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdKSA9PiB0b3RhbC5jb25jYXQodmFsdWVzKSxcclxuICAgICAgW11cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==