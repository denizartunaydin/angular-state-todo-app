/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';
import * as ɵngcc0 from '@angular/core';
export class HostEnvironment {
    /**
     * @param {?} isDevMode
     * @param {?} isTestMode
     */
    constructor(isDevMode, isTestMode) {
        this.isDevMode = isDevMode;
        this.isTestMode = isTestMode;
    }
}
HostEnvironment.ɵfac = function HostEnvironment_Factory(t) { return new (t || HostEnvironment)(ɵngcc0.ɵɵinject(NG_DEV_MODE), ɵngcc0.ɵɵinject(NG_TEST_MODE)); };
HostEnvironment.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HostEnvironment, factory: HostEnvironment.ɵfac });
/** @nocollapse */
HostEnvironment.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NG_DEV_MODE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [NG_TEST_MODE,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HostEnvironment, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NG_DEV_MODE]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [NG_TEST_MODE]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    HostEnvironment.prototype.isDevMode;
    /** @type {?} */
    HostEnvironment.prototype.isTestMode;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC1lbnZpcm9ubWVudC5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3N0b3JlL3NyYy9ob3N0LWVudmlyb25tZW50L2hvc3QtZW52aXJvbm1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDOztBQUl2RCxNQUFNLE9BQU8sZUFBZTtBQUM1QjtBQUFRO0FBQ2E7QUFBNkI7QUFBUSxJQUR4RCxZQUM4QixTQUE0QixFQUMzQixVQUE2QjtBQUMzRCxRQUY2QixjQUFTLEdBQVQsU0FBUyxDQUFtQjtBQUFDLFFBQzVCLGVBQVUsR0FBVixVQUFVLENBQW1CO0FBQzlELElBQUssQ0FBQztBQUNOOzJDQU5DLFVBQVU7NkdBQ1Q7QUFBQztBQUFtQjtBQUVMLDRDQUFaLE1BQU0sU0FBQyxXQUFXO0FBQVMsNENBQzNCLE1BQU0sU0FBQyxZQUFZO0FBQVE7Ozs7Ozs7OztrQ0FBRTtBQUFDO0FBQWE7QUFDMUMsSUFGRixvQ0FBd0Q7QUFBQztBQUN6QyxJQUFoQixxQ0FBMEQ7O0FBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUxBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBREEsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdfREVWX01PREUsIE5HX1RFU1RfTU9ERSB9IGZyb20gJy4uL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2ludGVybmFscyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBIb3N0RW52aXJvbm1lbnQge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQEluamVjdChOR19ERVZfTU9ERSkgcHVibGljIGlzRGV2TW9kZTogQ2FsbGJhY2s8Ym9vbGVhbj4sXHJcbiAgICBASW5qZWN0KE5HX1RFU1RfTU9ERSkgcHVibGljIGlzVGVzdE1vZGU6IENhbGxiYWNrPGJvb2xlYW4+XHJcbiAgKSB7fVxyXG59XHJcbiJdfQ==