/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { filter, mergeMap, tap } from 'rxjs/operators';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { getStateDiffChanges } from './internals';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngxs/store/internals';
export class LifecycleStateManager {
    /**
     * @param {?} internalStateOperations
     * @param {?} stateContextFactory
     * @param {?} bootstrapper
     */
    constructor(internalStateOperations, stateContextFactory, bootstrapper) {
        this.internalStateOperations = internalStateOperations;
        this.stateContextFactory = stateContextFactory;
        this.bootstrapper = bootstrapper;
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    ngxsBootstrap(action, results) {
        this.internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        () => !!results)), tap((/**
         * @return {?}
         */
        () => this.invokeInit((/** @type {?} */ (results)).states))), mergeMap((/**
         * @return {?}
         */
        () => this.bootstrapper.appBootstrapped$)), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        appBootstrapped => !!appBootstrapped)))
            .subscribe((/**
         * @return {?}
         */
        () => this.invokeBootstrap((/** @type {?} */ (results)).states)));
    }
    /**
     * Invoke the init function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    invokeInit(mappedStores) {
        for (const mappedStore of mappedStores) {
            /** @type {?} */
            const instance = mappedStore.instance;
            if (instance.ngxsOnChanges) {
                /** @type {?} */
                const currentAppState = {};
                /** @type {?} */
                const newAppState = this.internalStateOperations
                    .getRootStateOperations()
                    .getState();
                /** @type {?} */
                const firstDiffChange = getStateDiffChanges(mappedStore, {
                    currentAppState,
                    newAppState
                });
                instance.ngxsOnChanges(firstDiffChange);
            }
            if (instance.ngxsOnInit) {
                instance.ngxsOnInit(this.getStateContext(mappedStore));
            }
            mappedStore.isInitialised = true;
        }
    }
    /**
     * Invoke the bootstrap function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    invokeBootstrap(mappedStores) {
        for (const mappedStore of mappedStores) {
            /** @type {?} */
            const instance = mappedStore.instance;
            if (instance.ngxsAfterBootstrap) {
                instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));
            }
        }
    }
    /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    getStateContext(mappedStore) {
        return this.stateContextFactory.createStateContext(mappedStore);
    }
}
LifecycleStateManager.ɵfac = function LifecycleStateManager_Factory(t) { return new (t || LifecycleStateManager)(ɵngcc0.ɵɵinject(InternalStateOperations), ɵngcc0.ɵɵinject(StateContextFactory), ɵngcc0.ɵɵinject(ɵngcc1.NgxsBootstrapper)); };
LifecycleStateManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LifecycleStateManager, factory: LifecycleStateManager.ɵfac });
/** @nocollapse */
LifecycleStateManager.ctorParameters = () => [
    { type: InternalStateOperations },
    { type: StateContextFactory },
    { type: NgxsBootstrapper }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LifecycleStateManager, [{
        type: Injectable
    }], function () { return [{ type: InternalStateOperations }, { type: StateContextFactory }, { type: ɵngcc1.NgxsBootstrapper }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.bootstrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,