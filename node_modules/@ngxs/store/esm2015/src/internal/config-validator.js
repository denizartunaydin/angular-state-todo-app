/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CONFIG_MESSAGES as MESSAGES, VALIDATION_CODE as CODE } from '../configs/messages.config';
import { NgxsConfig } from '../symbols';
import { HostEnvironment } from '../host-environment/host-environment';
import * as ɵngcc0 from '@angular/core';
export class ConfigValidator {
    /**
     * @param {?} _host
     * @param {?} _config
     */
    constructor(_host, _config) {
        this._host = _host;
        this._config = _config;
    }
    /**
     * @private
     * @return {?}
     */
    get isIncorrectProduction() {
        return !this._host.isDevMode() && this._config.developmentMode;
    }
    /**
     * @private
     * @return {?}
     */
    get isIncorrectDevelopment() {
        return this._host.isDevMode() && !this._config.developmentMode;
    }
    /**
     * @return {?}
     */
    verifyDevMode() {
        if (this._host.isTestMode()) {
            return;
        }
        if (this.isIncorrectProduction) {
            console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());
        }
        else if (this.isIncorrectDevelopment) {
            console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());
        }
    }
}
ConfigValidator.ɵfac = function ConfigValidator_Factory(t) { return new (t || ConfigValidator)(ɵngcc0.ɵɵinject(HostEnvironment), ɵngcc0.ɵɵinject(NgxsConfig)); };
ConfigValidator.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ConfigValidator, factory: ConfigValidator.ɵfac });
/** @nocollapse */
ConfigValidator.ctorParameters = () => [
    { type: HostEnvironment },
    { type: NgxsConfig }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfigValidator, [{
        type: Injectable
    }], function () { return [{ type: HostEnvironment }, { type: NgxsConfig }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConfigValidator.prototype._host;
    /**
     * @type {?}
     * @private
     */
    ConfigValidator.prototype._config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRvci5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3N0b3JlL3NyYy9pbnRlcm5hbC9jb25maWctdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFDTCxlQUFlLElBQUksUUFBUSxFQUMzQixlQUFlLElBQUksSUFBSSxFQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOztBQUd2RSxNQUFNLE9BQU8sZUFBZTtBQUM1QjtBQUFRO0FBQXdCO0FBQTBCO0FBQVEsSUFBaEUsWUFBb0IsS0FBc0IsRUFBVSxPQUFtQjtBQUFJLFFBQXZELFVBQUssR0FBTCxLQUFLLENBQWlCO0FBQUMsUUFBUyxZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsSUFBRSxDQUFDO0FBQzdFO0FBQ087QUFBZ0I7QUFBbUI7QUFDekMsSUFEQyxJQUFZLHFCQUFxQjtBQUFLLFFBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ25FLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBZ0I7QUFBbUI7QUFDMUMsSUFERSxJQUFZLHNCQUFzQjtBQUFLLFFBQ3JDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ25FLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBbUI7QUFDekIsSUFEUSxhQUFhO0FBQUssUUFDdkIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFO0FBQ2pDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUNJLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO0FBQ3BDLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFELFNBQUs7QUFBQyxhQUFLLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO0FBQzVDLFlBQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDsyQ0F2QkMsVUFBVTs2R0FDVDtBQUFDO0FBQW1CO0FBQ1UsWUFKdkIsZUFBZTtBQUFJLFlBRG5CLFVBQVU7QUFBRzs7OytGQUFFO0FBQUM7QUFBYTtBQUNqQztBQUFpQjtBQUFnQjtBQUFRLElBSWhDLGdDQUE4QjtBQUFDO0FBQVE7QUFBaUI7QUFFL0Q7QUFBUSxJQUYrQixrQ0FBMkI7O0FBWEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBdEJBLEFBQUEsQUFGQSxBQUFBLEFBREEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtcclxuICBDT05GSUdfTUVTU0FHRVMgYXMgTUVTU0FHRVMsXHJcbiAgVkFMSURBVElPTl9DT0RFIGFzIENPREVcclxufSBmcm9tICcuLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcbmltcG9ydCB7IE5neHNDb25maWcgfSBmcm9tICcuLi9zeW1ib2xzJztcclxuaW1wb3J0IHsgSG9zdEVudmlyb25tZW50IH0gZnJvbSAnLi4vaG9zdC1lbnZpcm9ubWVudC9ob3N0LWVudmlyb25tZW50JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvbmZpZ1ZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfaG9zdDogSG9zdEVudmlyb25tZW50LCBwcml2YXRlIF9jb25maWc6IE5neHNDb25maWcpIHt9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGlzSW5jb3JyZWN0UHJvZHVjdGlvbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhdGhpcy5faG9zdC5pc0Rldk1vZGUoKSAmJiB0aGlzLl9jb25maWcuZGV2ZWxvcG1lbnRNb2RlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgaXNJbmNvcnJlY3REZXZlbG9wbWVudCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9ob3N0LmlzRGV2TW9kZSgpICYmICF0aGlzLl9jb25maWcuZGV2ZWxvcG1lbnRNb2RlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHZlcmlmeURldk1vZGUoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5faG9zdC5pc1Rlc3RNb2RlKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlzSW5jb3JyZWN0UHJvZHVjdGlvbikge1xyXG4gICAgICBjb25zb2xlLndhcm4oTUVTU0FHRVNbQ09ERS5JTkNPUlJFQ1RfUFJPRFVDVElPTl0oKSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNJbmNvcnJlY3REZXZlbG9wbWVudCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oTUVTU0FHRVNbQ09ERS5JTkNPUlJFQ1RfREVWRUxPUE1FTlRdKCkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=