/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import { NGXS_PLUGINS } from './symbols';
import * as ɵngcc0 from '@angular/core';
export class PluginManager {
    /**
     * @param {?} _parentManager
     * @param {?} _pluginHandlers
     */
    constructor(_parentManager, _pluginHandlers) {
        this._parentManager = _parentManager;
        this._pluginHandlers = _pluginHandlers;
        this.plugins = [];
        this.registerHandlers();
    }
    /**
     * @private
     * @return {?}
     */
    get rootPlugins() {
        return (this._parentManager && this._parentManager.plugins) || this.plugins;
    }
    /**
     * @private
     * @return {?}
     */
    registerHandlers() {
        /** @type {?} */
        const pluginHandlers = this.getPluginHandlers();
        this.rootPlugins.push(...pluginHandlers);
    }
    /**
     * @private
     * @return {?}
     */
    getPluginHandlers() {
        /** @type {?} */
        const handlers = this._pluginHandlers || [];
        return handlers.map((/**
         * @param {?} plugin
         * @return {?}
         */
        (plugin) => (/** @type {?} */ ((plugin.handle ? plugin.handle.bind(plugin) : plugin)))));
    }
}
PluginManager.ɵfac = function PluginManager_Factory(t) { return new (t || PluginManager)(ɵngcc0.ɵɵinject(PluginManager, 12), ɵngcc0.ɵɵinject(NGXS_PLUGINS, 8)); };
PluginManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PluginManager, factory: PluginManager.ɵfac });
/** @nocollapse */
PluginManager.ctorParameters = () => [
    { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PluginManager, [{
        type: Injectable
    }], function () { return [{ type: PluginManager, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: Array, decorators: [{
                type: Inject,
                args: [NGXS_PLUGINS]
            }, {
                type: Optional
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    PluginManager.prototype.plugins;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._parentManager;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._pluginHandlers;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9Abmd4cy9zdG9yZS9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBNEIsTUFBTSxXQUFXLENBQUM7O0FBR25FLE1BQU0sT0FBTyxhQUFhO0FBQzFCO0FBQVE7QUFFUDtBQUVHO0FBQVEsSUFGVixZQUdVLGNBQTZCLEVBRzdCLGVBQTZCO0FBQ3RDLFFBSlMsbUJBQWMsR0FBZCxjQUFjLENBQWU7QUFBQyxRQUc5QixvQkFBZSxHQUFmLGVBQWUsQ0FBYztBQUN6QyxRQVRTLFlBQU8sR0FBbUIsRUFBRSxDQUFDO0FBQ3RDLFFBU0ksSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDNUIsSUFBRSxDQUFDO0FBQ0g7QUFDTztBQUFnQjtBQUFtQjtBQUN0QyxJQURGLElBQVksV0FBVztBQUFLLFFBQzFCLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNoRixJQUFFLENBQUM7QUFDSDtBQUNPO0FBQWdCO0FBQ2xCO0FBQVEsSUFESCxnQkFBZ0I7QUFBSztBQUNaLGNBQVQsY0FBYyxHQUFtQixJQUFJLENBQUMsaUJBQWlCLEVBQUU7QUFDbkUsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDO0FBQzdDLElBQUUsQ0FBQztBQUNIO0FBQ087QUFBZ0I7QUFBbUI7QUFDeEMsSUFEUSxpQkFBaUI7QUFBSztBQUN2QixjQUFDLFFBQVEsR0FBaUIsSUFBSSxDQUFDLGVBQWUsSUFBSSxFQUFFO0FBQzdELFFBQUksT0FBTyxRQUFRLENBQUMsR0FBRztBQUNuQjtBQUNEO0FBQXVCO0FBQVksUUFEaEMsQ0FBQyxNQUFrQixFQUFFLEVBQUUsQ0FDckIsbUJBQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQWdCLEVBQ3hFLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDt5Q0EvQkMsVUFBVTt1R0FDVDtBQUFDO0FBQW1CO0FBQ1UsWUFLSixhQUFhLHVCQUZwQyxRQUFRLFlBQ1IsUUFBUTtBQUNULHdDQUNDLE1BQU0sU0FBQyxZQUFZLGNBQ25CLFFBQVE7QUFDVjs7Ozs7Ozs7Ozs7O2tDQUFFO0FBQUM7QUFBYTtBQUFxQixJQVJ0QyxnQ0FBb0M7QUFDdEM7QUFDTztBQUNFO0FBQ0E7QUFDUixJQUZHLHVDQUVxQztBQUFDO0FBQ25DO0FBQWlCO0FBQ1Y7QUFDUixJQUZGLHdDQUVxQzs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFHQSxBQUFBLEFBR0EsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBOUJBLEFBQUEsQUFPQSxBQUFBLEFBRkEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFQQSxBQUFBLEFBR0EsQUFFQSxBQUNBLEFBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOR1hTX1BMVUdJTlMsIE5neHNQbHVnaW4sIE5neHNQbHVnaW5GbiB9IGZyb20gJy4vc3ltYm9scyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQbHVnaW5NYW5hZ2VyIHtcclxuICBwdWJsaWMgcGx1Z2luczogTmd4c1BsdWdpbkZuW10gPSBbXTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBAT3B0aW9uYWwoKVxyXG4gICAgQFNraXBTZWxmKClcclxuICAgIHByaXZhdGUgX3BhcmVudE1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsXHJcbiAgICBASW5qZWN0KE5HWFNfUExVR0lOUylcclxuICAgIEBPcHRpb25hbCgpXHJcbiAgICBwcml2YXRlIF9wbHVnaW5IYW5kbGVyczogTmd4c1BsdWdpbltdXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlZ2lzdGVySGFuZGxlcnMoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IHJvb3RQbHVnaW5zKCk6IE5neHNQbHVnaW5GbltdIHtcclxuICAgIHJldHVybiAodGhpcy5fcGFyZW50TWFuYWdlciAmJiB0aGlzLl9wYXJlbnRNYW5hZ2VyLnBsdWdpbnMpIHx8IHRoaXMucGx1Z2lucztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVnaXN0ZXJIYW5kbGVycygpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBsdWdpbkhhbmRsZXJzOiBOZ3hzUGx1Z2luRm5bXSA9IHRoaXMuZ2V0UGx1Z2luSGFuZGxlcnMoKTtcclxuICAgIHRoaXMucm9vdFBsdWdpbnMucHVzaCguLi5wbHVnaW5IYW5kbGVycyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFBsdWdpbkhhbmRsZXJzKCk6IE5neHNQbHVnaW5GbltdIHtcclxuICAgIGNvbnN0IGhhbmRsZXJzOiBOZ3hzUGx1Z2luW10gPSB0aGlzLl9wbHVnaW5IYW5kbGVycyB8fCBbXTtcclxuICAgIHJldHVybiBoYW5kbGVycy5tYXAoXHJcbiAgICAgIChwbHVnaW46IE5neHNQbHVnaW4pID0+XHJcbiAgICAgICAgKHBsdWdpbi5oYW5kbGUgPyBwbHVnaW4uaGFuZGxlLmJpbmQocGx1Z2luKSA6IHBsdWdpbikgYXMgTmd4c1BsdWdpbkZuXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=