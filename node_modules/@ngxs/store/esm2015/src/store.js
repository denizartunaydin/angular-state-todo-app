/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:unified-signatures
import { Inject, Injectable, Optional } from '@angular/core';
import { of, throwError } from 'rxjs';
import { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';
import { INITIAL_STATE_TOKEN } from '@ngxs/store/internals';
import { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';
import { InternalStateOperations } from './internal/state-operations';
import { getRootSelectorFactory } from './utils/selector-utils';
import { StateStream } from './internal/state-stream';
import { leaveNgxs } from './operators/leave-ngxs';
import { NgxsConfig } from './symbols';
import { StateFactory } from './internal/state-factory';
import * as ɵngcc0 from '@angular/core';
export class Store {
    /**
     * @param {?} _stateStream
     * @param {?} _internalStateOperations
     * @param {?} _config
     * @param {?} _internalExecutionStrategy
     * @param {?} _stateFactory
     * @param {?} initialStateValue
     */
    constructor(_stateStream, _internalStateOperations, _config, _internalExecutionStrategy, _stateFactory, initialStateValue) {
        this._stateStream = _stateStream;
        this._internalStateOperations = _internalStateOperations;
        this._config = _config;
        this._internalExecutionStrategy = _internalExecutionStrategy;
        this._stateFactory = _stateFactory;
        this.initStateStream(initialStateValue);
    }
    /**
     * Dispatches event(s).
     * @param {?} actionOrActions
     * @return {?}
     */
    dispatch(actionOrActions) {
        return this._internalStateOperations.getRootStateOperations().dispatch(actionOrActions);
    }
    /**
     * @param {?} selector
     * @return {?}
     */
    select(selector) {
        /** @type {?} */
        const selectorFn = this.getStoreBoundSelectorFn(selector);
        return this._stateStream.pipe(map(selectorFn), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            // if error is TypeError we swallow it to prevent usual errors with property access
            const { suppressErrors } = this._config.selectorOptions;
            if (err instanceof TypeError && suppressErrors) {
                return of(undefined);
            }
            // rethrow other errors
            return throwError(err);
        })), distinctUntilChanged(), leaveNgxs(this._internalExecutionStrategy));
    }
    /**
     * @param {?} selector
     * @return {?}
     */
    selectOnce(selector) {
        return this.select(selector).pipe(take(1));
    }
    /**
     * @param {?} selector
     * @return {?}
     */
    selectSnapshot(selector) {
        /** @type {?} */
        const selectorFn = this.getStoreBoundSelectorFn(selector);
        return selectorFn(this._stateStream.getValue());
    }
    /**
     * Allow the user to subscribe to the root of the state
     * @param {?=} fn
     * @return {?}
     */
    subscribe(fn) {
        return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);
    }
    /**
     * Return the raw value of the state.
     * @return {?}
     */
    snapshot() {
        return this._internalStateOperations.getRootStateOperations().getState();
    }
    /**
     * Reset the state to a specific point in time. This method is useful
     * for plugin's who need to modify the state directly or unit testing.
     * @param {?} state
     * @return {?}
     */
    reset(state) {
        return this._internalStateOperations.getRootStateOperations().setState(state);
    }
    /**
     * @private
     * @param {?} selector
     * @return {?}
     */
    getStoreBoundSelectorFn(selector) {
        /** @type {?} */
        const makeSelectorFn = getRootSelectorFactory(selector);
        /** @type {?} */
        const runtimeContext = this._stateFactory.getRuntimeSelectorContext();
        return makeSelectorFn(runtimeContext);
    }
    /**
     * @private
     * @param {?} initialStateValue
     * @return {?}
     */
    initStateStream(initialStateValue) {
        /** @type {?} */
        const value = this._stateStream.value;
        /** @type {?} */
        const storeIsEmpty = !value || Object.keys(value).length === 0;
        if (storeIsEmpty) {
            /** @type {?} */
            const defaultStateNotEmpty = Object.keys(this._config.defaultsState).length > 0;
            /** @type {?} */
            const storeValues = defaultStateNotEmpty
                ? Object.assign({}, this._config.defaultsState, initialStateValue) : initialStateValue;
            this._stateStream.next(storeValues);
        }
    }
}
Store.ɵfac = function Store_Factory(t) { return new (t || Store)(ɵngcc0.ɵɵinject(StateStream), ɵngcc0.ɵɵinject(InternalStateOperations), ɵngcc0.ɵɵinject(NgxsConfig), ɵngcc0.ɵɵinject(InternalNgxsExecutionStrategy), ɵngcc0.ɵɵinject(StateFactory), ɵngcc0.ɵɵinject(INITIAL_STATE_TOKEN, 8)); };
Store.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Store, factory: Store.ɵfac });
/** @nocollapse */
Store.ctorParameters = () => [
    { type: StateStream },
    { type: InternalStateOperations },
    { type: NgxsConfig },
    { type: InternalNgxsExecutionStrategy },
    { type: StateFactory },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INITIAL_STATE_TOKEN,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Store, [{
        type: Injectable
    }], function () { return [{ type: StateStream }, { type: InternalStateOperations }, { type: NgxsConfig }, { type: InternalNgxsExecutionStrategy }, { type: StateFactory }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [INITIAL_STATE_TOKEN]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    Store.prototype._stateStream;
    /**
     * @type {?}
     * @private
     */
    Store.prototype._internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    Store.prototype._config;
    /**
     * @type {?}
     * @private
     */
    Store.prototype._internalExecutionStrategy;
    /**
     * @type {?}
     * @private
     */
    Store.prototype._stateFactory;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,