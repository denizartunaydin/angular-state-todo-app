{"version":3,"file":"ngxs-store-internals.umd.js","sources":["ng:/@ngxs/store/internals/memoize.ts","ng:/@ngxs/store/internals/angular.ts","ng:/@ngxs/store/internals/ngxs-bootstrapper.ts","ng:/@ngxs/store/internals/initial-state.ts","ng:/@ngxs/store/internals/internal-tokens.ts"],"names":["getPlatform","COMPILER_OPTIONS","ReplaySubject","Injectable","InjectionToken"],"mappings":"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","sourcesContent":["function defaultEqualityCheck(a: any, b: any) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(\r\n  equalityCheck: (a: any, b: any) => boolean,\r\n  prev: IArguments | null,\r\n  next: IArguments | null\r\n) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  equalityCheck = defaultEqualityCheck\r\n): T {\r\n  let lastArgs: IArguments | null = null;\r\n  let lastResult: any = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = (<Function>func).apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  }\r\n  (<any>memoized).reset = function() {\r\n    // The hidden (for now) ability to reset the memoization\r\n    lastArgs = null;\r\n    lastResult = null;\r\n  };\r\n  return memoized as T;\r\n}\r\n","import { getPlatform, COMPILER_OPTIONS, CompilerOptions, PlatformRef } from '@angular/core';\r\nimport { memoize } from './memoize';\r\n\r\nfunction _isAngularInTestMode() {\r\n  const platformRef: PlatformRef | null = getPlatform();\r\n  if (!platformRef) return false;\r\n  const compilerOptions = platformRef.injector.get<any>(COMPILER_OPTIONS, null);\r\n  if (!compilerOptions) return false;\r\n  const isInTestMode = compilerOptions.some((item: CompilerOptions) => {\r\n    const providers = (item && item.providers) || [];\r\n    return providers.some((provider: any) => {\r\n      return (\r\n        (provider && provider.provide && provider.provide.name === 'MockNgModuleResolver') ||\r\n        false\r\n      );\r\n    });\r\n  });\r\n  return isInTestMode;\r\n}\r\n\r\nexport const isAngularInTestMode = memoize(_isAngularInTestMode);\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxsBootstrapper {\r\n  /**\r\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\r\n   */\r\n  private bootstrap$ = new ReplaySubject<boolean>(1);\r\n\r\n  get appBootstrapped$(): Observable<boolean> {\r\n    return this.bootstrap$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This event will be emitted after attaching `ComponentRef` of the root component\r\n   * to the tree of views, that's a signal that application has been fully rendered\r\n   */\r\n  bootstrap(): void {\r\n    this.bootstrap$.next(true);\r\n    this.bootstrap$.complete();\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { PlainObject } from './symbols';\r\n\r\nexport const INITIAL_STATE_TOKEN = new InjectionToken<any>('INITIAL_STATE_TOKEN');\r\n\r\nexport class InitialState {\r\n  private static value: PlainObject = {};\r\n\r\n  public static set(state: PlainObject) {\r\n    this.value = state;\r\n  }\r\n\r\n  public static pop(): PlainObject {\r\n    const state: PlainObject = this.value;\r\n    this.value = {};\r\n    return state;\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\r\n */\r\nexport const NGXS_STATE_CONTEXT_FACTORY: InjectionToken<any> = new InjectionToken(\r\n  'Internals.StateContextFactory'\r\n);\r\n\r\n/**\r\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\r\n */\r\nexport const NGXS_STATE_FACTORY: InjectionToken<any> = new InjectionToken(\r\n  'Internals.StateFactory'\r\n);\r\n"]}