/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
var NgxsBootstrapper = /** @class */ (function () {
    function NgxsBootstrapper() {
        /**
         * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
         */
        this.bootstrap$ = new ReplaySubject(1);
    }
    Object.defineProperty(NgxsBootstrapper.prototype, "appBootstrapped$", {
        get: /**
         * @return {?}
         */
        function () {
            return this.bootstrap$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     */
    /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     * @return {?}
     */
    NgxsBootstrapper.prototype.bootstrap = /**
     * This event will be emitted after attaching `ComponentRef` of the root component
     * to the tree of views, that's a signal that application has been fully rendered
     * @return {?}
     */
    function () {
        this.bootstrap$.next(true);
        this.bootstrap$.complete();
    };
NgxsBootstrapper.ɵfac = function NgxsBootstrapper_Factory(t) { return new (t || NgxsBootstrapper)(); };
NgxsBootstrapper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxsBootstrapper, factory: function (t) { return NgxsBootstrapper.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsBootstrapper, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgxsBootstrapper;
}());
export { NgxsBootstrapper };
if (false) {
    /**
     * Use `ReplaySubject`, thus we can get cached value even if the stream is completed
     * @type {?}
     * @private
     */
    NgxsBootstrapper.prototype.bootstrap$;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1ib290c3RyYXBwZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvbmd4cy1ib290c3RyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFFakQ7QUFHQSxJQUhBO0FBQ2dCO0FBQVk7QUFFdUQ7QUFFakYsUUFBUSxlQUFVLEdBQUcsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDLENBQUM7QUFDckQsSUFhQSxDQUFDO0FBQ0QsSUFiRSxzQkFBSSw4Q0FBZ0I7QUFBSTtBQUFpQjtBQUN6QjtBQUFZLFFBRDVCO0FBQWMsWUFDWixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDMUMsUUFBRSxDQUFDO0FBRUg7QUFDb0I7QUFBMkIsT0FINUM7QUFDSCxJQUNFO0FBQ0Y7QUFDRTtBQUNFLE9BQUM7QUFDTDtBQUFRO0FBS0w7QUFBc0Y7QUFBbUI7QUFBUSxJQUxsSCxvQ0FBUztBQUFPO0FBS0w7QUFBc0Y7QUFBbUI7QUFBUSxJQUw1SDtBQUFjLFFBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsUUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9CLElBQUUsQ0FBQztvREFsQkYsVUFBVTs7OztnREFDTDtBQUFDLElBa0JQLHVCQUFDO0FBQ0EsQ0FEQSxBQW5CRCxJQW1CQztBQUNELFNBbkJhLGdCQUFnQjtBQUM1QjtBQUNPO0FBQVE7QUFFSjtBQUFpQjtBQUFnQjtBQUFRLElBQW5ELHNDQUFtRDs7QUFSQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFjQSxBQUFBLEFBWkEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFFQSxBQUdBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQWxCQSxBQUFBLEFBbUJBLEFBQUEsQUFBQSxBQW5CQSxBQW1CQSxBQWxCQSxBQUFBLEFBSUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c0Jvb3RzdHJhcHBlciB7XHJcbiAgLyoqXHJcbiAgICogVXNlIGBSZXBsYXlTdWJqZWN0YCwgdGh1cyB3ZSBjYW4gZ2V0IGNhY2hlZCB2YWx1ZSBldmVuIGlmIHRoZSBzdHJlYW0gaXMgY29tcGxldGVkXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBib290c3RyYXAkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XHJcblxyXG4gIGdldCBhcHBCb290c3RyYXBwZWQkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYm9vdHN0cmFwJC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgZXZlbnQgd2lsbCBiZSBlbWl0dGVkIGFmdGVyIGF0dGFjaGluZyBgQ29tcG9uZW50UmVmYCBvZiB0aGUgcm9vdCBjb21wb25lbnRcclxuICAgKiB0byB0aGUgdHJlZSBvZiB2aWV3cywgdGhhdCdzIGEgc2lnbmFsIHRoYXQgYXBwbGljYXRpb24gaGFzIGJlZW4gZnVsbHkgcmVuZGVyZWRcclxuICAgKi9cclxuICBib290c3RyYXAoKTogdm9pZCB7XHJcbiAgICB0aGlzLmJvb3RzdHJhcCQubmV4dCh0cnVlKTtcclxuICAgIHRoaXMuYm9vdHN0cmFwJC5jb21wbGV0ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=