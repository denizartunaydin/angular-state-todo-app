/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { filter, mergeMap, tap } from 'rxjs/operators';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { getStateDiffChanges } from './internals';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngxs/store/internals';
var LifecycleStateManager = /** @class */ (function () {
    function LifecycleStateManager(internalStateOperations, stateContextFactory, bootstrapper) {
        this.internalStateOperations = internalStateOperations;
        this.stateContextFactory = stateContextFactory;
        this.bootstrapper = bootstrapper;
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    LifecycleStateManager.prototype.ngxsBootstrap = /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    function (action, results) {
        var _this = this;
        this.internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !!results; })), tap((/**
         * @return {?}
         */
        function () { return _this.invokeInit((/** @type {?} */ (results)).states); })), mergeMap((/**
         * @return {?}
         */
        function () { return _this.bootstrapper.appBootstrapped$; })), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        function (appBootstrapped) { return !!appBootstrapped; })))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.invokeBootstrap((/** @type {?} */ (results)).states); }));
    };
    /**
     * Invoke the init function on the states.
     */
    /**
     * Invoke the init function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeInit = /**
     * Invoke the init function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    function (mappedStores) {
        var e_1, _a;
        try {
            for (var mappedStores_1 = tslib_1.__values(mappedStores), mappedStores_1_1 = mappedStores_1.next(); !mappedStores_1_1.done; mappedStores_1_1 = mappedStores_1.next()) {
                var mappedStore = mappedStores_1_1.value;
                /** @type {?} */
                var instance = mappedStore.instance;
                if (instance.ngxsOnChanges) {
                    /** @type {?} */
                    var currentAppState = {};
                    /** @type {?} */
                    var newAppState = this.internalStateOperations
                        .getRootStateOperations()
                        .getState();
                    /** @type {?} */
                    var firstDiffChange = getStateDiffChanges(mappedStore, {
                        currentAppState: currentAppState,
                        newAppState: newAppState
                    });
                    instance.ngxsOnChanges(firstDiffChange);
                }
                if (instance.ngxsOnInit) {
                    instance.ngxsOnInit(this.getStateContext(mappedStore));
                }
                mappedStore.isInitialised = true;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (mappedStores_1_1 && !mappedStores_1_1.done && (_a = mappedStores_1.return)) _a.call(mappedStores_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Invoke the bootstrap function on the states.
     */
    /**
     * Invoke the bootstrap function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeBootstrap = /**
     * Invoke the bootstrap function on the states.
     * @param {?} mappedStores
     * @return {?}
     */
    function (mappedStores) {
        var e_2, _a;
        try {
            for (var mappedStores_2 = tslib_1.__values(mappedStores), mappedStores_2_1 = mappedStores_2.next(); !mappedStores_2_1.done; mappedStores_2_1 = mappedStores_2.next()) {
                var mappedStore = mappedStores_2_1.value;
                /** @type {?} */
                var instance = mappedStore.instance;
                if (instance.ngxsAfterBootstrap) {
                    instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (mappedStores_2_1 && !mappedStores_2_1.done && (_a = mappedStores_2.return)) _a.call(mappedStores_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    LifecycleStateManager.prototype.getStateContext = /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    function (mappedStore) {
        return this.stateContextFactory.createStateContext(mappedStore);
    };
    /** @nocollapse */
    LifecycleStateManager.ctorParameters = function () { return [
        { type: InternalStateOperations },
        { type: StateContextFactory },
        { type: NgxsBootstrapper }
    ]; };
LifecycleStateManager.ɵfac = function LifecycleStateManager_Factory(t) { return new (t || LifecycleStateManager)(ɵngcc0.ɵɵinject(InternalStateOperations), ɵngcc0.ɵɵinject(StateContextFactory), ɵngcc0.ɵɵinject(ɵngcc1.NgxsBootstrapper)); };
LifecycleStateManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LifecycleStateManager, factory: function (t) { return LifecycleStateManager.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LifecycleStateManager, [{
        type: Injectable
    }], function () { return [{ type: InternalStateOperations }, { type: StateContextFactory }, { type: ɵngcc1.NgxsBootstrapper }]; }, null); })();
    return LifecycleStateManager;
}());
export { LifecycleStateManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.bootstrapper;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,