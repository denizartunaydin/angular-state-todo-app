/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CONFIG_MESSAGES as MESSAGES, VALIDATION_CODE as CODE } from '../configs/messages.config';
import { NgxsConfig } from '../symbols';
import { HostEnvironment } from '../host-environment/host-environment';
import * as ɵngcc0 from '@angular/core';
var ConfigValidator = /** @class */ (function () {
    function ConfigValidator(_host, _config) {
        this._host = _host;
        this._config = _config;
    }
    Object.defineProperty(ConfigValidator.prototype, "isIncorrectProduction", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return !this._host.isDevMode() && this._config.developmentMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigValidator.prototype, "isIncorrectDevelopment", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._host.isDevMode() && !this._config.developmentMode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ConfigValidator.prototype.verifyDevMode = /**
     * @return {?}
     */
    function () {
        if (this._host.isTestMode()) {
            return;
        }
        if (this.isIncorrectProduction) {
            console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());
        }
        else if (this.isIncorrectDevelopment) {
            console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());
        }
    };
    /** @nocollapse */
    ConfigValidator.ctorParameters = function () { return [
        { type: HostEnvironment },
        { type: NgxsConfig }
    ]; };
ConfigValidator.ɵfac = function ConfigValidator_Factory(t) { return new (t || ConfigValidator)(ɵngcc0.ɵɵinject(HostEnvironment), ɵngcc0.ɵɵinject(NgxsConfig)); };
ConfigValidator.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ConfigValidator, factory: function (t) { return ConfigValidator.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ConfigValidator, [{
        type: Injectable
    }], function () { return [{ type: HostEnvironment }, { type: NgxsConfig }]; }, null); })();
    return ConfigValidator;
}());
export { ConfigValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConfigValidator.prototype._host;
    /**
     * @type {?}
     * @private
     */
    ConfigValidator.prototype._config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXZhbGlkYXRvci5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3N0b3JlL3NyYy9pbnRlcm5hbC9jb25maWctdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFDTCxlQUFlLElBQUksUUFBUSxFQUMzQixlQUFlLElBQUksSUFBSSxFQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOztBQUV2RTtBQUVNLElBQUoseUJBQW9CLEtBQXNCLEVBQVUsT0FBbUI7QUFBSSxRQUF2RCxVQUFLLEdBQUwsS0FBSyxDQUFpQjtBQUFDLFFBQVMsWUFBTyxHQUFQLE9BQU8sQ0FBWTtBQUFDLElBQUUsQ0FBQztBQUM3RSxJQUNFLHNCQUFZLGtEQUFxQjtBQUFJO0FBQ2hDO0FBQW9CO0FBQXVCO0FBQVksUUFENUQ7QUFBYyxZQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ25FLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ3ZCLE9BSEE7QUFDSCxJQUNFLHNCQUFZLG1EQUFzQjtBQUFJO0FBQ2pDO0FBQW9CO0FBQXVCO0FBQVksUUFENUQ7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ25FLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ04sT0FIakI7QUFDSDtBQUNPO0FBQW1CO0FBQ3pCLElBRFEsdUNBQWE7QUFBTztBQUNkO0FBQVEsSUFEckI7QUFBYyxRQUNaLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRTtBQUNqQyxZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFDSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtBQUNwQyxZQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxRCxTQUFLO0FBQUMsYUFBSyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtBQUM1QyxZQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRCxTQUFLO0FBQ0wsSUFBRSxDQUFDLENBckJHO0FBQUM7NEJBRE4sVUFBVSx0Q0FDbUI7QUFDNkIsZ0JBSmxELGVBQWU7QUFBSSxnQkFEbkIsVUFBVTtBQUFHOzs7OzsrRkFBUztBQUFDLElBMEJoQyxzQkFBQztBQUNBLENBREEsQUF2QkQsSUF1QkM7QUFDRCxTQXZCYSxlQUFlO0FBQzNCO0FBQWE7QUFBUTtBQUFpQjtBQUFnQjtBQUFRLElBQWpELGdDQUE4QjtBQUFDO0FBQVE7QUFBaUI7QUFFL0Q7QUFBUSxJQUYrQixrQ0FBMkI7O0FBWEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXRCQSxBQUFBLEFBRkEsQUFBQSxBQURBLEFBQUEsQUEwQkEsQUFBQSxBQUFBLEFBdkJBLEFBdUJBLEFBdEJBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7XHJcbiAgQ09ORklHX01FU1NBR0VTIGFzIE1FU1NBR0VTLFxyXG4gIFZBTElEQVRJT05fQ09ERSBhcyBDT0RFXHJcbn0gZnJvbSAnLi4vY29uZmlncy9tZXNzYWdlcy5jb25maWcnO1xyXG5pbXBvcnQgeyBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcbmltcG9ydCB7IEhvc3RFbnZpcm9ubWVudCB9IGZyb20gJy4uL2hvc3QtZW52aXJvbm1lbnQvaG9zdC1lbnZpcm9ubWVudCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDb25maWdWYWxpZGF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2hvc3Q6IEhvc3RFbnZpcm9ubWVudCwgcHJpdmF0ZSBfY29uZmlnOiBOZ3hzQ29uZmlnKSB7fVxyXG5cclxuICBwcml2YXRlIGdldCBpc0luY29ycmVjdFByb2R1Y3Rpb24oKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIXRoaXMuX2hvc3QuaXNEZXZNb2RlKCkgJiYgdGhpcy5fY29uZmlnLmRldmVsb3BtZW50TW9kZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGlzSW5jb3JyZWN0RGV2ZWxvcG1lbnQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faG9zdC5pc0Rldk1vZGUoKSAmJiAhdGhpcy5fY29uZmlnLmRldmVsb3BtZW50TW9kZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB2ZXJpZnlEZXZNb2RlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX2hvc3QuaXNUZXN0TW9kZSgpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc0luY29ycmVjdFByb2R1Y3Rpb24pIHtcclxuICAgICAgY29uc29sZS53YXJuKE1FU1NBR0VTW0NPREUuSU5DT1JSRUNUX1BST0RVQ1RJT05dKCkpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmlzSW5jb3JyZWN0RGV2ZWxvcG1lbnQpIHtcclxuICAgICAgY29uc29sZS53YXJuKE1FU1NBR0VTW0NPREUuSU5DT1JSRUNUX0RFVkVMT1BNRU5UXSgpKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19