/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, NgModule, Optional } from '@angular/core';
import { StateFactory } from '../internal/state-factory';
import { InternalStateOperations } from '../internal/state-operations';
import { Store } from '../store';
import { SelectFactory } from '../decorators/select/select-factory';
import { ROOT_STATE_TOKEN } from '../symbols';
import { LifecycleStateManager } from '../internal/lifecycle-state-manager';
import { InitState } from '../actions/actions';
import { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';
/**
 * Root module
 * @ignore
 */
import * as ɵngcc0 from '@angular/core';
var NgxsRootModule = /** @class */ (function () {
    function NgxsRootModule(factory, internalStateOperations, _store, _select, states, lifecycleStateManager) {
        if (states === void 0) { states = []; }
        // Validate states on having the `@Injectable()` decorator in Ivy
        setIvyEnabledInDevMode();
        // Add stores to the state graph and return their defaults
        /** @type {?} */
        var results = factory.addAndReturnDefaults(states);
        internalStateOperations.setStateToTheCurrentWithNew(results);
        // Connect our actions stream
        factory.connectActionHandlers();
        // Dispatch the init action and invoke init and bootstrap functions after
        lifecycleStateManager.ngxsBootstrap(new InitState(), results);
    }
    /** @nocollapse */
    NgxsRootModule.ctorParameters = function () { return [
        { type: StateFactory },
        { type: InternalStateOperations },
        { type: Store },
        { type: SelectFactory },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [ROOT_STATE_TOKEN,] }] },
        { type: LifecycleStateManager }
    ]; };
NgxsRootModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxsRootModule });
NgxsRootModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxsRootModule_Factory(t) { return new (t || NgxsRootModule)(ɵngcc0.ɵɵinject(StateFactory), ɵngcc0.ɵɵinject(InternalStateOperations), ɵngcc0.ɵɵinject(Store), ɵngcc0.ɵɵinject(SelectFactory), ɵngcc0.ɵɵinject(ROOT_STATE_TOKEN, 8), ɵngcc0.ɵɵinject(LifecycleStateManager)); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsRootModule, [{
        type: NgModule
    }], function () { return [{ type: StateFactory }, { type: InternalStateOperations }, { type: Store }, { type: SelectFactory }, { type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ROOT_STATE_TOKEN]
            }] }, { type: LifecycleStateManager }]; }, null); })();
    return NgxsRootModule;
}());
export { NgxsRootModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4cy1yb290Lm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3N0b3JlL3NyYy9tb2R1bGVzL25neHMtcm9vdC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdkUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNqQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDcEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4RTtBQUNHO0FBQ1c7QUFDSjs7QUFFVjtBQUVRLElBQU4sd0JBQ0UsT0FBcUIsRUFDckIsdUJBQWdELEVBQ2hELE1BQWEsRUFDYixPQUFzQixFQUd0QixNQUFpQyxFQUNqQyxxQkFBNEM7QUFDN0MsUUFKQyx1QkFBQSxFQUFBLFdBRWlDO0FBQ25DLFFBRUUsaUVBQWlFO0FBQ3JFLFFBQUksc0JBQXNCLEVBQUUsQ0FBQztBQUM3QjtBQUVHO0FBQXlCLFlBQWxCLE9BQU8sR0FBc0IsT0FBTyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztBQUMzRSxRQUNJLHVCQUF1QixDQUFDLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLFFBQ0ksNkJBQTZCO0FBQ2pDLFFBQUksT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDcEMsUUFDSSx5RUFBeUU7QUFDN0UsUUFBSSxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxTQUFTLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNsRSxJQUFFLENBQUMsQUF4Qkc7QUFBQzsyQkFETixRQUFRLG5DQUVUO0FBRWlCLGdCQWxCUixZQUFZO0FBQUksZ0JBQ2hCLHVCQUF1QjtBQUFJLGdCQUMzQixLQUFLO0FBQUksZ0JBQ1QsYUFBYTtBQUFJLDRDQWtCckIsUUFBUSxZQUNSLE1BQU0sU0FBQyxnQkFBZ0I7QUFDckIsZ0JBakJFLHFCQUFxQjtBQUFHOzs7Ozs7Ozs7O21FQUFTO0FBQUMsSUFrQzNDLHFCQUFDO0FBQ0EsQ0FEQSxBQTFCRCxJQTBCQzs7QUExQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUVBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUdBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBRUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBekJBLEFBQUEsQUFkQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBa0JBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQWhCQSxBQUFBLEFBa0NBLEFBQUEsQUFBQSxBQTFCQSxBQTBCQSxBQXpCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBOZ01vZHVsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFN0YXRlRmFjdG9yeSB9IGZyb20gJy4uL2ludGVybmFsL3N0YXRlLWZhY3RvcnknO1xyXG5pbXBvcnQgeyBJbnRlcm5hbFN0YXRlT3BlcmF0aW9ucyB9IGZyb20gJy4uL2ludGVybmFsL3N0YXRlLW9wZXJhdGlvbnMnO1xyXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJy4uL3N0b3JlJztcclxuaW1wb3J0IHsgU2VsZWN0RmFjdG9yeSB9IGZyb20gJy4uL2RlY29yYXRvcnMvc2VsZWN0L3NlbGVjdC1mYWN0b3J5JztcclxuaW1wb3J0IHsgUk9PVF9TVEFURV9UT0tFTiB9IGZyb20gJy4uL3N5bWJvbHMnO1xyXG5pbXBvcnQgeyBTdGF0ZUNsYXNzSW50ZXJuYWwsIFN0YXRlc0FuZERlZmF1bHRzIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgTGlmZWN5Y2xlU3RhdGVNYW5hZ2VyIH0gZnJvbSAnLi4vaW50ZXJuYWwvbGlmZWN5Y2xlLXN0YXRlLW1hbmFnZXInO1xyXG5pbXBvcnQgeyBJbml0U3RhdGUgfSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbnMnO1xyXG5pbXBvcnQgeyBzZXRJdnlFbmFibGVkSW5EZXZNb2RlIH0gZnJvbSAnLi4vaXZ5L2l2eS1lbmFibGVkLWluLWRldi1tb2RlJztcclxuXHJcbi8qKlxyXG4gKiBSb290IG1vZHVsZVxyXG4gKiBAaWdub3JlXHJcbiAqL1xyXG5ATmdNb2R1bGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4c1Jvb3RNb2R1bGUge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgZmFjdG9yeTogU3RhdGVGYWN0b3J5LFxyXG4gICAgaW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnM6IEludGVybmFsU3RhdGVPcGVyYXRpb25zLFxyXG4gICAgX3N0b3JlOiBTdG9yZSxcclxuICAgIF9zZWxlY3Q6IFNlbGVjdEZhY3RvcnksXHJcbiAgICBAT3B0aW9uYWwoKVxyXG4gICAgQEluamVjdChST09UX1NUQVRFX1RPS0VOKVxyXG4gICAgc3RhdGVzOiBTdGF0ZUNsYXNzSW50ZXJuYWxbXSA9IFtdLFxyXG4gICAgbGlmZWN5Y2xlU3RhdGVNYW5hZ2VyOiBMaWZlY3ljbGVTdGF0ZU1hbmFnZXJcclxuICApIHtcclxuICAgIC8vIFZhbGlkYXRlIHN0YXRlcyBvbiBoYXZpbmcgdGhlIGBASW5qZWN0YWJsZSgpYCBkZWNvcmF0b3IgaW4gSXZ5XHJcbiAgICBzZXRJdnlFbmFibGVkSW5EZXZNb2RlKCk7XHJcblxyXG4gICAgLy8gQWRkIHN0b3JlcyB0byB0aGUgc3RhdGUgZ3JhcGggYW5kIHJldHVybiB0aGVpciBkZWZhdWx0c1xyXG4gICAgY29uc3QgcmVzdWx0czogU3RhdGVzQW5kRGVmYXVsdHMgPSBmYWN0b3J5LmFkZEFuZFJldHVybkRlZmF1bHRzKHN0YXRlcyk7XHJcblxyXG4gICAgaW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnMuc2V0U3RhdGVUb1RoZUN1cnJlbnRXaXRoTmV3KHJlc3VsdHMpO1xyXG5cclxuICAgIC8vIENvbm5lY3Qgb3VyIGFjdGlvbnMgc3RyZWFtXHJcbiAgICBmYWN0b3J5LmNvbm5lY3RBY3Rpb25IYW5kbGVycygpO1xyXG5cclxuICAgIC8vIERpc3BhdGNoIHRoZSBpbml0IGFjdGlvbiBhbmQgaW52b2tlIGluaXQgYW5kIGJvb3RzdHJhcCBmdW5jdGlvbnMgYWZ0ZXJcclxuICAgIGxpZmVjeWNsZVN0YXRlTWFuYWdlci5uZ3hzQm9vdHN0cmFwKG5ldyBJbml0U3RhdGUoKSwgcmVzdWx0cyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==