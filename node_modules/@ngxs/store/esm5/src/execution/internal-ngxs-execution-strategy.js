/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { NGXS_EXECUTION_STRATEGY } from './symbols';
import * as ɵngcc0 from '@angular/core';
var InternalNgxsExecutionStrategy = /** @class */ (function () {
    function InternalNgxsExecutionStrategy(_executionStrategy) {
        this._executionStrategy = _executionStrategy;
    }
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    InternalNgxsExecutionStrategy.prototype.enter = /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    function (func) {
        return this._executionStrategy.enter(func);
    };
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    InternalNgxsExecutionStrategy.prototype.leave = /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    function (func) {
        return this._executionStrategy.leave(func);
    };
    /** @nocollapse */
    InternalNgxsExecutionStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGXS_EXECUTION_STRATEGY,] }] }
    ]; };
InternalNgxsExecutionStrategy.ɵfac = function InternalNgxsExecutionStrategy_Factory(t) { return new (t || InternalNgxsExecutionStrategy)(ɵngcc0.ɵɵinject(NGXS_EXECUTION_STRATEGY)); };
InternalNgxsExecutionStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: InternalNgxsExecutionStrategy, factory: function (t) { return InternalNgxsExecutionStrategy.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InternalNgxsExecutionStrategy, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NGXS_EXECUTION_STRATEGY]
            }] }]; }, null); })();
    return InternalNgxsExecutionStrategy;
}());
export { InternalNgxsExecutionStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InternalNgxsExecutionStrategy.prototype._executionStrategy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWwtbmd4cy1leGVjdXRpb24tc3RyYXRlZ3kuanMiLCJzb3VyY2VzIjpbIm5nOi9Abmd4cy9zdG9yZS9zcmMvZXhlY3V0aW9uL2ludGVybmFsLW5neHMtZXhlY3V0aW9uLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQXlCLHVCQUF1QixFQUFFLE1BQU0sV0FBVyxDQUFDOztBQUUzRTtBQUNtRCxJQUNqRCx1Q0FDMkMsa0JBQXlDO0FBQ25GLFFBRDBDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBdUI7QUFDdEYsSUFBSyxDQUFDO0FBQ047QUFDTztBQUFtQjtBQUNSO0FBQW1CO0FBQVEsSUFEM0MsNkNBQUs7QUFBTztBQUNaO0FBQXVCO0FBQW1CO0FBRTVDLElBSEUsVUFBUyxJQUFhO0FBQUksUUFDeEIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9DLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBbUI7QUFDUjtBQUFtQjtBQUFRLElBRDVDLDZDQUFLO0FBQU87QUFDWjtBQUF1QjtBQUFtQjtBQUU1QyxJQUhFLFVBQVMsSUFBYTtBQUFJLFFBQ3hCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMvQyxJQUFFLENBQUMsQ0FYRztBQUFDOzBDQUROLFVBQVUscERBQ21CO0FBRW5CLGdEQUFOLE1BQU0sU0FBQyx1QkFBdUI7QUFBUTs7Ozs7Ozs7a0NBQVM7QUFBQyxJQVVyRCxvQ0FBQztBQUNBLENBREEsQUFiRCxJQWFDO0FBQ0QsU0FiYSw2QkFBNkI7QUFBSTtBQUFhO0FBQVE7QUFDN0Q7QUFDQztBQUFRLElBQVgsMkRBQWtGOztBQVBBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBRUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFaQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFVQSxBQUFBLEFBQUEsQUFiQSxBQWFBLEFBWkEsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE5neHNFeGVjdXRpb25TdHJhdGVneSwgTkdYU19FWEVDVVRJT05fU1RSQVRFR1kgfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kgaW1wbGVtZW50cyBOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQEluamVjdChOR1hTX0VYRUNVVElPTl9TVFJBVEVHWSkgcHJpdmF0ZSBfZXhlY3V0aW9uU3RyYXRlZ3k6IE5neHNFeGVjdXRpb25TdHJhdGVneVxyXG4gICkge31cclxuXHJcbiAgZW50ZXI8VD4oZnVuYzogKCkgPT4gVCk6IFQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGlvblN0cmF0ZWd5LmVudGVyKGZ1bmMpO1xyXG4gIH1cclxuXHJcbiAgbGVhdmU8VD4oZnVuYzogKCkgPT4gVCk6IFQge1xyXG4gICAgcmV0dXJuIHRoaXMuX2V4ZWN1dGlvblN0cmF0ZWd5LmxlYXZlKGZ1bmMpO1xyXG4gIH1cclxufVxyXG4iXX0=