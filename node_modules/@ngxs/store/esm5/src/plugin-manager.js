/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';
import { NGXS_PLUGINS } from './symbols';
import * as ɵngcc0 from '@angular/core';
var PluginManager = /** @class */ (function () {
    function PluginManager(_parentManager, _pluginHandlers) {
        this._parentManager = _parentManager;
        this._pluginHandlers = _pluginHandlers;
        this.plugins = [];
        this.registerHandlers();
    }
    Object.defineProperty(PluginManager.prototype, "rootPlugins", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return (this._parentManager && this._parentManager.plugins) || this.plugins;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    PluginManager.prototype.registerHandlers = /**
     * @private
     * @return {?}
     */
    function () {
        var _a;
        /** @type {?} */
        var pluginHandlers = this.getPluginHandlers();
        (_a = this.rootPlugins).push.apply(_a, tslib_1.__spread(pluginHandlers));
    };
    /**
     * @private
     * @return {?}
     */
    PluginManager.prototype.getPluginHandlers = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var handlers = this._pluginHandlers || [];
        return handlers.map((/**
         * @param {?} plugin
         * @return {?}
         */
        function (plugin) { return (/** @type {?} */ ((plugin.handle ? plugin.handle.bind(plugin) : plugin))); }));
    };
    /** @nocollapse */
    PluginManager.ctorParameters = function () { return [
        { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }
    ]; };
PluginManager.ɵfac = function PluginManager_Factory(t) { return new (t || PluginManager)(ɵngcc0.ɵɵinject(PluginManager, 12), ɵngcc0.ɵɵinject(NGXS_PLUGINS, 8)); };
PluginManager.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PluginManager, factory: function (t) { return PluginManager.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PluginManager, [{
        type: Injectable
    }], function () { return [{ type: PluginManager, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: Array, decorators: [{
                type: Inject,
                args: [NGXS_PLUGINS]
            }, {
                type: Optional
            }] }]; }, null); })();
    return PluginManager;
}());
export { PluginManager };
if (false) {
    /** @type {?} */
    PluginManager.prototype.plugins;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._parentManager;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._pluginHandlers;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VzIjpbIm5nOi9Abmd4cy9zdG9yZS9zcmMvcGx1Z2luLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQTRCLE1BQU0sV0FBVyxDQUFDOztBQUVuRTtBQUVNLElBRUosdUJBR1UsY0FBNkIsRUFHN0IsZUFBNkI7QUFDdEMsUUFKUyxtQkFBYyxHQUFkLGNBQWMsQ0FBZTtBQUFDLFFBRzlCLG9CQUFlLEdBQWYsZUFBZSxDQUFjO0FBQ3pDLFFBVFMsWUFBTyxHQUFtQixFQUFFLENBQUM7QUFDdEMsUUFTSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUM1QixJQUFFLENBQUM7QUFDSCxJQUNFLHNCQUFZLHNDQUFXO0FBQUk7QUFDN0I7QUFBb0I7QUFBdUI7QUFBWSxRQURyRDtBQUFjLFlBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ2hGLFFBQUUsQ0FBQztBQUVIO0FBQTBCO0FBQ1YsT0FIYjtBQUNIO0FBQ087QUFBZ0I7QUFDbEI7QUFBUSxJQURILHdDQUFnQjtBQUFPO0FBQ3JCO0FBQW1CO0FBQVEsSUFEckM7QUFBYztBQUFnQjtBQUNaLFlBQVYsY0FBYyxHQUFtQixJQUFJLENBQUMsaUJBQWlCLEVBQUU7QUFDbkUsUUFBSSxDQUFBLEtBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQSxDQUFDLElBQUksNEJBQUksY0FBYyxHQUFFO0FBQzdDLElBQUUsQ0FBQztBQUVIO0FBQVE7QUFBZ0I7QUFBbUI7QUFDeEMsSUFETyx5Q0FBaUI7QUFBTztBQUNoQztBQUFtQjtBQUFRLElBRDNCO0FBQWM7QUFBeUIsWUFDL0IsUUFBUSxHQUFpQixJQUFJLENBQUMsZUFBZSxJQUFJLEVBQUU7QUFDN0QsUUFBSSxPQUFPLFFBQVEsQ0FBQyxHQUFHO0FBQ25CO0FBQ0Q7QUFBdUI7QUFBWSxRQURoQyxVQUFDLE1BQWtCLFdBQ2pCLG1CQUFBLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFnQixHQUFBLEVBQ3hFLENBQUM7QUFDTixJQUFFLENBQUMsQ0E3Qkc7QUFBQzswQkFETixVQUFVLHBDQUVWO0FBR0csZ0JBRXdCLGFBQWEsdUJBRnBDLFFBQVEsWUFDUixRQUFRO0FBQ1QsNENBQ0MsTUFBTSxTQUFDLFlBQVksY0FDbkIsUUFBUTtBQUNWOzs7Ozs7Ozs7Ozs7OztrQ0FBUztBQUFDLElBcUJiLG9CQUFDO0FBQ0EsQ0FEQSxBQS9CRCxJQStCQztBQUNELFNBL0JhLGFBQWE7QUFDekI7QUFBYTtBQUFxQixJQUFqQyxnQ0FBb0M7QUFDdEM7QUFDTztBQUNFO0FBQ0E7QUFDUixJQUZHLHVDQUVxQztBQUFDO0FBQ25DO0FBQWlCO0FBQ1Y7QUFDUixJQUZGLHdDQUVxQzs7QUFiQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBSUEsQUFHQSxBQUFBLEFBR0EsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUE5QkEsQUFBQSxBQU9BLEFBQUEsQUFGQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXNCQSxBQUFBLEFBQUEsQUEvQkEsQUErQkEsQUE5QkEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUVBLEFBQ0EsQUFFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HWFNfUExVR0lOUywgTmd4c1BsdWdpbiwgTmd4c1BsdWdpbkZuIH0gZnJvbSAnLi9zeW1ib2xzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBsdWdpbk1hbmFnZXIge1xyXG4gIHB1YmxpYyBwbHVnaW5zOiBOZ3hzUGx1Z2luRm5bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpXHJcbiAgICBAU2tpcFNlbGYoKVxyXG4gICAgcHJpdmF0ZSBfcGFyZW50TWFuYWdlcjogUGx1Z2luTWFuYWdlcixcclxuICAgIEBJbmplY3QoTkdYU19QTFVHSU5TKVxyXG4gICAgQE9wdGlvbmFsKClcclxuICAgIHByaXZhdGUgX3BsdWdpbkhhbmRsZXJzOiBOZ3hzUGx1Z2luW11cclxuICApIHtcclxuICAgIHRoaXMucmVnaXN0ZXJIYW5kbGVycygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgcm9vdFBsdWdpbnMoKTogTmd4c1BsdWdpbkZuW10ge1xyXG4gICAgcmV0dXJuICh0aGlzLl9wYXJlbnRNYW5hZ2VyICYmIHRoaXMuX3BhcmVudE1hbmFnZXIucGx1Z2lucykgfHwgdGhpcy5wbHVnaW5zO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlckhhbmRsZXJzKCk6IHZvaWQge1xyXG4gICAgY29uc3QgcGx1Z2luSGFuZGxlcnM6IE5neHNQbHVnaW5GbltdID0gdGhpcy5nZXRQbHVnaW5IYW5kbGVycygpO1xyXG4gICAgdGhpcy5yb290UGx1Z2lucy5wdXNoKC4uLnBsdWdpbkhhbmRsZXJzKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0UGx1Z2luSGFuZGxlcnMoKTogTmd4c1BsdWdpbkZuW10ge1xyXG4gICAgY29uc3QgaGFuZGxlcnM6IE5neHNQbHVnaW5bXSA9IHRoaXMuX3BsdWdpbkhhbmRsZXJzIHx8IFtdO1xyXG4gICAgcmV0dXJuIGhhbmRsZXJzLm1hcChcclxuICAgICAgKHBsdWdpbjogTmd4c1BsdWdpbikgPT5cclxuICAgICAgICAocGx1Z2luLmhhbmRsZSA/IHBsdWdpbi5oYW5kbGUuYmluZChwbHVnaW4pIDogcGx1Z2luKSBhcyBOZ3hzUGx1Z2luRm5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==