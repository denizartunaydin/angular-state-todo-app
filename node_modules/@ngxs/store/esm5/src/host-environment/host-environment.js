/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';
import * as ɵngcc0 from '@angular/core';
var HostEnvironment = /** @class */ (function () {
    function HostEnvironment(isDevMode, isTestMode) {
        this.isDevMode = isDevMode;
        this.isTestMode = isTestMode;
    }
    /** @nocollapse */
    HostEnvironment.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NG_DEV_MODE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [NG_TEST_MODE,] }] }
    ]; };
HostEnvironment.ɵfac = function HostEnvironment_Factory(t) { return new (t || HostEnvironment)(ɵngcc0.ɵɵinject(NG_DEV_MODE), ɵngcc0.ɵɵinject(NG_TEST_MODE)); };
HostEnvironment.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HostEnvironment, factory: function (t) { return HostEnvironment.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HostEnvironment, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NG_DEV_MODE]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [NG_TEST_MODE]
            }] }]; }, null); })();
    return HostEnvironment;
}());
export { HostEnvironment };
if (false) {
    /** @type {?} */
    HostEnvironment.prototype.isDevMode;
    /** @type {?} */
    HostEnvironment.prototype.isTestMode;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC1lbnZpcm9ubWVudC5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3N0b3JlL3NyYy9ob3N0LWVudmlyb25tZW50L2hvc3QtZW52aXJvbm1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDOztBQUd2RDtBQUVNLElBQUoseUJBQzhCLFNBQTRCLEVBQzNCLFVBQTZCO0FBQzNELFFBRjZCLGNBQVMsR0FBVCxTQUFTLENBQW1CO0FBQUMsUUFDNUIsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7QUFDOUQsSUFBSyxDQUFDLEFBSkE7QUFBQzs0QkFETixVQUFVLHRDQUNtQjtBQUVjLGdEQUF2QyxNQUFNLFNBQUMsV0FBVztBQUFTLGdEQUMzQixNQUFNLFNBQUMsWUFBWTtBQUFROzs7Ozs7Ozs7OztrQ0FBUztBQUFDLElBRTFDLHNCQUFDO0FBQ0EsQ0FEQSxBQU5ELElBTUM7QUFDRCxTQU5hLGVBQWU7QUFDM0I7QUFBYTtBQUNNLElBQWhCLG9DQUF3RDtBQUFDO0FBQ3pDLElBQWhCLHFDQUEwRDs7QUFSQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFFQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBTEEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFOQSxBQU1BLEFBTEEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX0RFVl9NT0RFLCBOR19URVNUX01PREUgfSBmcm9tICcuLi9zeW1ib2xzJztcclxuaW1wb3J0IHsgQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSG9zdEVudmlyb25tZW50IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBJbmplY3QoTkdfREVWX01PREUpIHB1YmxpYyBpc0Rldk1vZGU6IENhbGxiYWNrPGJvb2xlYW4+LFxyXG4gICAgQEluamVjdChOR19URVNUX01PREUpIHB1YmxpYyBpc1Rlc3RNb2RlOiBDYWxsYmFjazxib29sZWFuPlxyXG4gICkge31cclxufVxyXG4iXX0=