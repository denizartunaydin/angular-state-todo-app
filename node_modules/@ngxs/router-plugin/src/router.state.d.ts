import { NgZone } from '@angular/core';
import { Router, RouterStateSnapshot, UrlSerializer } from '@angular/router';
import { LocationStrategy, Location } from '@angular/common';
import { StateContext, Store } from '@ngxs/store';
import { Navigate, RouterAction } from './router.actions';
import { RouterStateSerializer } from './serializer';
import * as ɵngcc0 from '@angular/core';
export interface RouterStateModel<T = RouterStateSnapshot> {
    state?: T;
    navigationId?: number;
    trigger: RouterTrigger;
}
export declare type RouterTrigger = 'none' | 'router' | 'store';
export declare class RouterState {
    private _store;
    private _router;
    private _serializer;
    private _ngZone;
    private _urlSerializer;
    private _locationStrategy;
    private _location;
    /**
     * Determines how navigation was performed by the `RouterState` itself
     * or outside via `new Navigate(...)`
     */
    private _trigger;
    /**
     * That's the serialized state from the `Router` class
     */
    private _routerState;
    /**
     * That's the value of the `RouterState` state
     */
    private _storeState;
    private _lastRoutesRecognized;
    static state<T = RouterStateSnapshot>(state: RouterStateModel<T>): T | undefined;
    static url(state: RouterStateModel): string | undefined;
    constructor(_store: Store, _router: Router, _serializer: RouterStateSerializer<RouterStateSnapshot>, _ngZone: NgZone, _urlSerializer: UrlSerializer, _locationStrategy: LocationStrategy, _location: Location);
    navigate(_: StateContext<RouterStateModel>, action: Navigate): Promise<boolean>;
    angularRouterAction(ctx: StateContext<RouterStateModel>, action: RouterAction<RouterStateModel, RouterStateSnapshot>): void;
    private setUpStoreListener;
    private setUpRouterEventsListener;
    private navigationStart;
    private navigationEnd;
    private shouldDispatchRouterNavigation;
    private navigateIfNeeded;
    private dispatchRouterNavigation;
    private dispatchRouterCancel;
    private dispatchRouterError;
    private dispatchRouterAction;
    private dispatchRouterDataResolved;
    private reset;
    /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     */
    private checkInitialNavigationOnce;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RouterState, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<RouterState>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLnN0YXRlLmQudHMiLCJzb3VyY2VzIjpbInJvdXRlci5zdGF0ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlciwgUm91dGVyU3RhdGVTbmFwc2hvdCwgVXJsU2VyaWFsaXplciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3ksIExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgU3RhdGVDb250ZXh0LCBTdG9yZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcclxuaW1wb3J0IHsgTmF2aWdhdGUsIFJvdXRlckFjdGlvbiB9IGZyb20gJy4vcm91dGVyLmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlclN0YXRlTW9kZWw8VCA9IFJvdXRlclN0YXRlU25hcHNob3Q+IHtcclxuICAgIHN0YXRlPzogVDtcclxuICAgIG5hdmlnYXRpb25JZD86IG51bWJlcjtcclxuICAgIHRyaWdnZXI6IFJvdXRlclRyaWdnZXI7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgdHlwZSBSb3V0ZXJUcmlnZ2VyID0gJ25vbmUnIHwgJ3JvdXRlcicgfCAnc3RvcmUnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSb3V0ZXJTdGF0ZSB7XHJcbiAgICBwcml2YXRlIF9zdG9yZTtcclxuICAgIHByaXZhdGUgX3JvdXRlcjtcclxuICAgIHByaXZhdGUgX3NlcmlhbGl6ZXI7XHJcbiAgICBwcml2YXRlIF9uZ1pvbmU7XHJcbiAgICBwcml2YXRlIF91cmxTZXJpYWxpemVyO1xyXG4gICAgcHJpdmF0ZSBfbG9jYXRpb25TdHJhdGVneTtcclxuICAgIHByaXZhdGUgX2xvY2F0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIGhvdyBuYXZpZ2F0aW9uIHdhcyBwZXJmb3JtZWQgYnkgdGhlIGBSb3V0ZXJTdGF0ZWAgaXRzZWxmXHJcbiAgICAgKiBvciBvdXRzaWRlIHZpYSBgbmV3IE5hdmlnYXRlKC4uLilgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3RyaWdnZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoYXQncyB0aGUgc2VyaWFsaXplZCBzdGF0ZSBmcm9tIHRoZSBgUm91dGVyYCBjbGFzc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9yb3V0ZXJTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogVGhhdCdzIHRoZSB2YWx1ZSBvZiB0aGUgYFJvdXRlclN0YXRlYCBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9zdG9yZVN0YXRlO1xyXG4gICAgcHJpdmF0ZSBfbGFzdFJvdXRlc1JlY29nbml6ZWQ7XHJcbiAgICBzdGF0aWMgc3RhdGU8VCA9IFJvdXRlclN0YXRlU25hcHNob3Q+KHN0YXRlOiBSb3V0ZXJTdGF0ZU1vZGVsPFQ+KTogVCB8IHVuZGVmaW5lZDtcclxuICAgIHN0YXRpYyB1cmwoc3RhdGU6IFJvdXRlclN0YXRlTW9kZWwpOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICBjb25zdHJ1Y3Rvcihfc3RvcmU6IFN0b3JlLCBfcm91dGVyOiBSb3V0ZXIsIF9zZXJpYWxpemVyOiBSb3V0ZXJTdGF0ZVNlcmlhbGl6ZXI8Um91dGVyU3RhdGVTbmFwc2hvdD4sIF9uZ1pvbmU6IE5nWm9uZSwgX3VybFNlcmlhbGl6ZXI6IFVybFNlcmlhbGl6ZXIsIF9sb2NhdGlvblN0cmF0ZWd5OiBMb2NhdGlvblN0cmF0ZWd5LCBfbG9jYXRpb246IExvY2F0aW9uKTtcclxuICAgIG5hdmlnYXRlKF86IFN0YXRlQ29udGV4dDxSb3V0ZXJTdGF0ZU1vZGVsPiwgYWN0aW9uOiBOYXZpZ2F0ZSk6IFByb21pc2U8Ym9vbGVhbj47XHJcbiAgICBhbmd1bGFyUm91dGVyQWN0aW9uKGN0eDogU3RhdGVDb250ZXh0PFJvdXRlclN0YXRlTW9kZWw+LCBhY3Rpb246IFJvdXRlckFjdGlvbjxSb3V0ZXJTdGF0ZU1vZGVsLCBSb3V0ZXJTdGF0ZVNuYXBzaG90Pik6IHZvaWQ7XHJcbiAgICBwcml2YXRlIHNldFVwU3RvcmVMaXN0ZW5lcjtcclxuICAgIHByaXZhdGUgc2V0VXBSb3V0ZXJFdmVudHNMaXN0ZW5lcjtcclxuICAgIHByaXZhdGUgbmF2aWdhdGlvblN0YXJ0O1xyXG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uRW5kO1xyXG4gICAgcHJpdmF0ZSBzaG91bGREaXNwYXRjaFJvdXRlck5hdmlnYXRpb247XHJcbiAgICBwcml2YXRlIG5hdmlnYXRlSWZOZWVkZWQ7XHJcbiAgICBwcml2YXRlIGRpc3BhdGNoUm91dGVyTmF2aWdhdGlvbjtcclxuICAgIHByaXZhdGUgZGlzcGF0Y2hSb3V0ZXJDYW5jZWw7XHJcbiAgICBwcml2YXRlIGRpc3BhdGNoUm91dGVyRXJyb3I7XHJcbiAgICBwcml2YXRlIGRpc3BhdGNoUm91dGVyQWN0aW9uO1xyXG4gICAgcHJpdmF0ZSBkaXNwYXRjaFJvdXRlckRhdGFSZXNvbHZlZDtcclxuICAgIHByaXZhdGUgcmVzZXQ7XHJcbiAgICAvKipcclxuICAgICAqIE5vIHNlbnNlIHRvIG1lc3MgdXAgdGhlIGBzZXRVcFJvdXRlckV2ZW50c0xpc3RlbmVyYCBtZXRob2QgYXMgd2UgaGF2ZVxyXG4gICAgICogdG8gcGVyZm9ybSB0aGlzIGNoZWNrIG9ubHkgb25jZSBhbmQgdW5zdWJzY3JpYmUgYWZ0ZXIgdGhlIGZpcnN0IGV2ZW50XHJcbiAgICAgKiBpcyB0cmlnZ2VyZWRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja0luaXRpYWxOYXZpZ2F0aW9uT25jZTtcclxufVxyXG4iXX0=