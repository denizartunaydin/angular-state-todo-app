{"version":3,"file":"ngxs-router-plugin.js","sources":["ng:/@ngxs/router-plugin/src/router.actions.ts","ng:/@ngxs/router-plugin/src/serializer.ts","ng:/@ngxs/router-plugin/src/router.state.ts","ng:/@ngxs/router-plugin/src/router.module.ts"],"names":["tslib_1.__decorate"],"mappings":"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","sourcesContent":["import {\r\n  NavigationCancel,\r\n  NavigationError,\r\n  NavigationExtras,\r\n  Params,\r\n  RouterStateSnapshot,\r\n  RoutesRecognized,\r\n  ResolveEnd\r\n} from '@angular/router';\r\n\r\nimport { RouterTrigger } from './router.state';\r\n\r\n/**\r\n * Public event api of the router\r\n */\r\nexport class Navigate {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] Navigate';\r\n  }\r\n  constructor(\r\n    public path: any[],\r\n    public queryParams?: Params,\r\n    public extras?: NavigationExtras\r\n  ) {}\r\n}\r\n\r\n/**\r\n *\r\n * Angular Routers internal state events\r\n *\r\n */\r\n\r\n/**\r\n * An action dispatched when the router navigates.\r\n */\r\nexport class RouterNavigation<T = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterNavigation';\r\n  }\r\n  constructor(\r\n    public routerState: T,\r\n    public event: RoutesRecognized,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An action dispatched when the router cancel navigation.\r\n */\r\nexport class RouterCancel<T, V = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterCancel';\r\n  }\r\n  constructor(\r\n    public routerState: V,\r\n    public storeState: T,\r\n    public event: NavigationCancel,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An action dispatched when the router errors.\r\n */\r\nexport class RouterError<T, V = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterError';\r\n  }\r\n  constructor(\r\n    public routerState: V,\r\n    public storeState: T,\r\n    public event: NavigationError,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An action dispatched when the `ResolveEnd` event is triggered.\r\n */\r\nexport class RouterDataResolved<T = RouterStateSnapshot> {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '[Router] RouterDataResolved';\r\n  }\r\n  constructor(\r\n    public routerState: T,\r\n    public event: ResolveEnd,\r\n    public trigger: RouterTrigger = 'none'\r\n  ) {}\r\n}\r\n\r\n/**\r\n * An union type of router actions.\r\n */\r\nexport type RouterAction<T, V = RouterStateSnapshot> =\r\n  | RouterNavigation<V>\r\n  | RouterCancel<T, V>\r\n  | RouterError<T, V>\r\n  | RouterDataResolved<V>;\r\n","import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nexport abstract class RouterStateSerializer<T> {\r\n  abstract serialize(routerState: RouterStateSnapshot): T;\r\n}\r\n\r\nexport interface SerializedRouterStateSnapshot {\r\n  root: ActivatedRouteSnapshot;\r\n  url: string;\r\n}\r\n\r\nexport class DefaultRouterStateSerializer\r\n  implements RouterStateSerializer<SerializedRouterStateSnapshot> {\r\n  serialize(routerState: RouterStateSnapshot): SerializedRouterStateSnapshot {\r\n    return {\r\n      root: this.serializeRoute(routerState.root),\r\n      url: routerState.url\r\n    };\r\n  }\r\n\r\n  private serializeRoute(route: ActivatedRouteSnapshot): ActivatedRouteSnapshot {\r\n    const children = route.children.map(c => this.serializeRoute(c));\r\n    return {\r\n      url: route.url,\r\n      params: route.params,\r\n      queryParams: route.queryParams,\r\n      fragment: route.fragment,\r\n      data: route.data,\r\n      outlet: route.outlet,\r\n      component: null,\r\n      routeConfig: null,\r\n      root: null as any,\r\n      parent: null,\r\n      firstChild: children[0],\r\n      children: children,\r\n      pathFromRoot: null as any,\r\n      paramMap: route.paramMap,\r\n      queryParamMap: route.queryParamMap,\r\n      toString: route.toString\r\n    };\r\n  }\r\n}\r\n","import { NgZone, Injectable } from '@angular/core';\r\nimport {\r\n  NavigationCancel,\r\n  NavigationError,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  RoutesRecognized,\r\n  ResolveEnd,\r\n  UrlSerializer,\r\n  NavigationStart,\r\n  NavigationEnd\r\n} from '@angular/router';\r\nimport { LocationStrategy, Location } from '@angular/common';\r\nimport { Action, Selector, State, StateContext, Store } from '@ngxs/store';\r\nimport { isAngularInTestMode } from '@ngxs/store/internals';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport {\r\n  Navigate,\r\n  RouterAction,\r\n  RouterCancel,\r\n  RouterError,\r\n  RouterNavigation,\r\n  RouterDataResolved\r\n} from './router.actions';\r\nimport { RouterStateSerializer } from './serializer';\r\n\r\nexport interface RouterStateModel<T = RouterStateSnapshot> {\r\n  state?: T;\r\n  navigationId?: number;\r\n  trigger: RouterTrigger;\r\n}\r\n\r\nexport type RouterTrigger = 'none' | 'router' | 'store';\r\n\r\n@State<RouterStateModel>({\r\n  name: 'router',\r\n  defaults: {\r\n    state: undefined,\r\n    navigationId: undefined,\r\n    trigger: 'none'\r\n  }\r\n})\r\n@Injectable()\r\nexport class RouterState {\r\n  /**\r\n   * Determines how navigation was performed by the `RouterState` itself\r\n   * or outside via `new Navigate(...)`\r\n   */\r\n  private _trigger: RouterTrigger = 'none';\r\n\r\n  /**\r\n   * That's the serialized state from the `Router` class\r\n   */\r\n  private _routerState: RouterStateSnapshot | null = null;\r\n\r\n  /**\r\n   * That's the value of the `RouterState` state\r\n   */\r\n  private _storeState: RouterStateModel | null = null;\r\n\r\n  private _lastRoutesRecognized: RoutesRecognized = null!;\r\n\r\n  @Selector()\r\n  static state<T = RouterStateSnapshot>(state: RouterStateModel<T>) {\r\n    return state && state.state;\r\n  }\r\n\r\n  @Selector()\r\n  static url(state: RouterStateModel): string | undefined {\r\n    return state && state.state && state.state.url;\r\n  }\r\n\r\n  constructor(\r\n    private _store: Store,\r\n    private _router: Router,\r\n    private _serializer: RouterStateSerializer<RouterStateSnapshot>,\r\n    private _ngZone: NgZone,\r\n    private _urlSerializer: UrlSerializer,\r\n    private _locationStrategy: LocationStrategy,\r\n    private _location: Location\r\n  ) {\r\n    this.setUpStoreListener();\r\n    this.setUpRouterEventsListener();\r\n    this.checkInitialNavigationOnce();\r\n  }\r\n\r\n  @Action(Navigate)\r\n  navigate(_: StateContext<RouterStateModel>, action: Navigate) {\r\n    return this._ngZone.run(() =>\r\n      this._router.navigate(action.path, {\r\n        queryParams: action.queryParams,\r\n        ...action.extras\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action([RouterNavigation, RouterError, RouterCancel, RouterDataResolved])\r\n  angularRouterAction(\r\n    ctx: StateContext<RouterStateModel>,\r\n    action: RouterAction<RouterStateModel, RouterStateSnapshot>\r\n  ): void {\r\n    ctx.setState({\r\n      ...ctx.getState(),\r\n      trigger: action.trigger,\r\n      state: action.routerState,\r\n      navigationId: action.event.id\r\n    });\r\n  }\r\n\r\n  private setUpStoreListener(): void {\r\n    this._store.select(RouterState).subscribe((state: RouterStateModel | undefined) => {\r\n      this.navigateIfNeeded(state);\r\n    });\r\n  }\r\n\r\n  private setUpRouterEventsListener(): void {\r\n    this._router.events.subscribe(event => {\r\n      if (event instanceof NavigationStart) {\r\n        this.navigationStart();\r\n      } else if (event instanceof RoutesRecognized) {\r\n        this._lastRoutesRecognized = event;\r\n      } else if (event instanceof ResolveEnd) {\r\n        this.dispatchRouterDataResolved(event);\r\n      } else if (event instanceof NavigationCancel) {\r\n        this.dispatchRouterCancel(event);\r\n        this.reset();\r\n      } else if (event instanceof NavigationError) {\r\n        this.dispatchRouterError(event);\r\n        this.reset();\r\n      } else if (event instanceof NavigationEnd) {\r\n        this.navigationEnd();\r\n        this.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  private navigationStart(): void {\r\n    this._routerState = this._serializer.serialize(this._router.routerState.snapshot);\r\n\r\n    if (this._trigger !== 'none') {\r\n      this._storeState = this._store.selectSnapshot(RouterState);\r\n    }\r\n  }\r\n\r\n  private navigationEnd(): void {\r\n    if (this.shouldDispatchRouterNavigation()) {\r\n      this.dispatchRouterNavigation();\r\n    }\r\n  }\r\n\r\n  private shouldDispatchRouterNavigation(): boolean {\r\n    if (!this._storeState) return true;\r\n    return this._trigger !== 'store';\r\n  }\r\n\r\n  private navigateIfNeeded(state: RouterStateModel | undefined): void {\r\n    const canSkipNavigation =\r\n      !this._storeState ||\r\n      !this._storeState.state ||\r\n      !state ||\r\n      state.trigger === 'router' ||\r\n      this._router.url === this._storeState.state.url;\r\n\r\n    if (canSkipNavigation) {\r\n      return;\r\n    }\r\n\r\n    this._trigger = 'store';\r\n    this._ngZone.run(() => {\r\n      this._router.navigateByUrl(this._storeState!.state!.url);\r\n    });\r\n  }\r\n\r\n  private dispatchRouterNavigation(): void {\r\n    const nextRouterState = this._serializer.serialize(this._lastRoutesRecognized.state);\r\n\r\n    this.dispatchRouterAction(\r\n      new RouterNavigation(\r\n        nextRouterState,\r\n        new RoutesRecognized(\r\n          this._lastRoutesRecognized.id,\r\n          this._lastRoutesRecognized.url,\r\n          this._lastRoutesRecognized.urlAfterRedirects,\r\n          nextRouterState\r\n        ),\r\n        this._trigger\r\n      )\r\n    );\r\n  }\r\n\r\n  private dispatchRouterCancel(event: NavigationCancel): void {\r\n    this.dispatchRouterAction(\r\n      new RouterCancel(this._routerState!, this._storeState, event, this._trigger)\r\n    );\r\n  }\r\n\r\n  private dispatchRouterError(event: NavigationError): void {\r\n    this.dispatchRouterAction(\r\n      new RouterError(\r\n        this._routerState!,\r\n        this._storeState,\r\n        new NavigationError(event.id, event.url, `${event}`),\r\n        this._trigger\r\n      )\r\n    );\r\n  }\r\n\r\n  private dispatchRouterAction<T>(action: RouterAction<T>): void {\r\n    this._trigger = 'router';\r\n\r\n    try {\r\n      this._store.dispatch(action);\r\n    } finally {\r\n      this._trigger = 'none';\r\n    }\r\n  }\r\n\r\n  private dispatchRouterDataResolved(event: ResolveEnd): void {\r\n    const routerState = this._serializer.serialize(event.state);\r\n    this.dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));\r\n  }\r\n\r\n  private reset(): void {\r\n    this._trigger = 'none';\r\n    this._storeState = null;\r\n    this._routerState = null;\r\n  }\r\n\r\n  /**\r\n   * No sense to mess up the `setUpRouterEventsListener` method as we have\r\n   * to perform this check only once and unsubscribe after the first event\r\n   * is triggered\r\n   */\r\n  private checkInitialNavigationOnce(): void {\r\n    if (isAngularInTestMode()) {\r\n      return;\r\n    }\r\n\r\n    this._router.events\r\n      .pipe(first((event): event is RoutesRecognized => event instanceof RoutesRecognized))\r\n      .subscribe(({ url }) => {\r\n        // `location.pathname` always equals manually entered URL in the address bar\r\n        // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized\r\n        // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the\r\n        // `RouterNavigation` action will be dispatched and the user will be redirected to the\r\n        // previously saved URL. We want to prevent such behavior, so we perform this check\r\n\r\n        // `url` is a recognized URL by the Angular's router, while `currentUrl` is an actual URL\r\n        // entered in the browser's address bar\r\n        // `PathLocationStrategy.prototype.path()` returns a concatenation of\r\n        // `PlatformLocation.pathname` and normalized `PlatformLocation.search`.\r\n\r\n        // `Location.prototype.normalize` strips base href from the URL,\r\n        // if `baseHref` (declared in angular.json) for example is `/en`\r\n        // and the URL is `/test#anchor` - then `_locationStrategy.path(true)` will return `/en/test#anchor`,\r\n        // but `/en/test#anchor` is not known to the Angular's router, so we have to strip `/en`\r\n        // from the URL\r\n        const currentUrl = this._location.normalize(this._locationStrategy.path(true));\r\n        const currentUrlTree = this._urlSerializer.parse(currentUrl);\r\n        // We need to serialize the URL because in that example `/test/?redirect=https://google.com/`\r\n        // Angular will recognize it as `/test?redirect=https:%2F%2Fwww.google.com%2F`\r\n        // so we have to run the `currentUrl` via the `UrlSerializer` that will encode characters\r\n        const currentSerializedUrl = this._urlSerializer.serialize(currentUrlTree);\r\n\r\n        // If URLs differ from each other - we've got to perform a redirect to the manually entered URL\r\n        // in the address bar, as it must have a priority\r\n        if (currentSerializedUrl !== url) {\r\n          this._router.navigateByUrl(currentUrl);\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\n\r\nimport { RouterState } from './router.state';\r\nimport { DefaultRouterStateSerializer, RouterStateSerializer } from './serializer';\r\n\r\n@NgModule({\r\n  imports: [NgxsModule.forFeature([RouterState])]\r\n})\r\nexport class NgxsRouterPluginModule {\r\n  static forRoot(): ModuleWithProviders<NgxsRouterPluginModule> {\r\n    return {\r\n      ngModule: NgxsRouterPluginModule,\r\n      providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]\r\n    };\r\n  }\r\n}\r\n"]}