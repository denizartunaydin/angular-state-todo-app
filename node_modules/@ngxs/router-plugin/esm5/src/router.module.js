/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { NgxsModule } from '@ngxs/store';
import { RouterState } from './router.state';
import { DefaultRouterStateSerializer, RouterStateSerializer } from './serializer';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngxs/store';
var NgxsRouterPluginModule = /** @class */ (function () {
    function NgxsRouterPluginModule() {
    }
    /**
     * @return {?}
     */
    NgxsRouterPluginModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NgxsRouterPluginModule,
            providers: [{ provide: RouterStateSerializer, useClass: DefaultRouterStateSerializer }]
        };
    };
NgxsRouterPluginModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxsRouterPluginModule });
NgxsRouterPluginModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxsRouterPluginModule_Factory(t) { return new (t || NgxsRouterPluginModule)(); }, imports: [[NgxsModule.forFeature([RouterState])]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxsRouterPluginModule, { imports: [ɵngcc1.ɵbc] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsRouterPluginModule, [{
        type: NgModule,
        args: [{
                imports: [NgxsModule.forFeature([RouterState])]
            }]
    }], function () { return []; }, null); })();
    return NgxsRouterPluginModule;
}());
export { NgxsRouterPluginModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZXMiOlsibmc6L0BuZ3hzL3JvdXRlci1wbHVnaW4vc3JjL3JvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7O0FBRW5GO0FBQzhDLElBRDlDO0FBQ3dCLElBU3hCLENBQUM7QUFDRDtBQUFRO0FBQW1CO0FBQVEsSUFQMUIsOEJBQU87QUFBTztBQUFtQjtBQUFRLElBQWhEO0FBQWMsUUFDWixPQUFPO0FBQ1gsWUFBTSxRQUFRLEVBQUUsc0JBQXNCO0FBQ3RDLFlBQU0sU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLDRCQUE0QixFQUFFLENBQUM7QUFDN0YsU0FBSyxDQUFDO0FBQ04sSUFBRSxDQUFDOzBEQVRGLFFBQVEsU0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGtCQUNoRDs7Ozs7OztnREFDUTtBQUFDLElBT1YsNkJBQUM7QUFDQSxDQURBLEFBVkQsSUFVQzs7QUFoQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBVUEsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFRQSxBQUFBLEFBQUEsQUFWQSxBQVVBLEFBUEEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neHNNb2R1bGUgfSBmcm9tICdAbmd4cy9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBSb3V0ZXJTdGF0ZSB9IGZyb20gJy4vcm91dGVyLnN0YXRlJztcclxuaW1wb3J0IHsgRGVmYXVsdFJvdXRlclN0YXRlU2VyaWFsaXplciwgUm91dGVyU3RhdGVTZXJpYWxpemVyIH0gZnJvbSAnLi9zZXJpYWxpemVyJztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW05neHNNb2R1bGUuZm9yRmVhdHVyZShbUm91dGVyU3RhdGVdKV1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neHNSb3V0ZXJQbHVnaW5Nb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnM8Tmd4c1JvdXRlclBsdWdpbk1vZHVsZT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IE5neHNSb3V0ZXJQbHVnaW5Nb2R1bGUsXHJcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogUm91dGVyU3RhdGVTZXJpYWxpemVyLCB1c2VDbGFzczogRGVmYXVsdFJvdXRlclN0YXRlU2VyaWFsaXplciB9XVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19