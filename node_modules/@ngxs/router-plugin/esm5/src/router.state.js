/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgZone, Injectable } from '@angular/core';
import { NavigationCancel, NavigationError, Router, RouterStateSnapshot, RoutesRecognized, ResolveEnd, UrlSerializer, NavigationStart, NavigationEnd } from '@angular/router';
import { LocationStrategy, Location } from '@angular/common';
import { Action, Selector, State, StateContext, Store } from '@ngxs/store';
import { isAngularInTestMode } from '@ngxs/store/internals';
import { first } from 'rxjs/operators';
import { Navigate, RouterCancel, RouterError, RouterNavigation, RouterDataResolved } from './router.actions';
import { RouterStateSerializer } from './serializer';
/**
 * @record
 * @template T
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngxs/store';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/common';
export function RouterStateModel() { }
if (false) {
    /** @type {?|undefined} */
    RouterStateModel.prototype.state;
    /** @type {?|undefined} */
    RouterStateModel.prototype.navigationId;
    /** @type {?} */
    RouterStateModel.prototype.trigger;
}
var RouterState = /** @class */ (function () {
    function RouterState(_store, _router, _serializer, _ngZone, _urlSerializer, _locationStrategy, _location) {
        this._store = _store;
        this._router = _router;
        this._serializer = _serializer;
        this._ngZone = _ngZone;
        this._urlSerializer = _urlSerializer;
        this._locationStrategy = _locationStrategy;
        this._location = _location;
        /**
         * Determines how navigation was performed by the `RouterState` itself
         * or outside via `new Navigate(...)`
         */
        this._trigger = 'none';
        /**
         * That's the serialized state from the `Router` class
         */
        this._routerState = null;
        /**
         * That's the value of the `RouterState` state
         */
        this._storeState = null;
        this._lastRoutesRecognized = (/** @type {?} */ (null));
        this.setUpStoreListener();
        this.setUpRouterEventsListener();
        this.checkInitialNavigationOnce();
    }
    RouterState_1 = RouterState;
    /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    RouterState.state = /**
     * @template T
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    RouterState.url = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return state && state.state && state.state.url;
    };
    /**
     * @param {?} _
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.navigate = /**
     * @param {?} _
     * @param {?} action
     * @return {?}
     */
    function (_, action) {
        var _this = this;
        return this._ngZone.run((/**
         * @return {?}
         */
        function () {
            return _this._router.navigate(action.path, tslib_1.__assign({ queryParams: action.queryParams }, action.extras));
        }));
    };
    /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.angularRouterAction = /**
     * @param {?} ctx
     * @param {?} action
     * @return {?}
     */
    function (ctx, action) {
        ctx.setState(tslib_1.__assign({}, ctx.getState(), { trigger: action.trigger, state: action.routerState, navigationId: action.event.id }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpStoreListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._store.select(RouterState_1).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            _this.navigateIfNeeded(state);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.setUpRouterEventsListener = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof NavigationStart) {
                _this.navigationStart();
            }
            else if (event instanceof RoutesRecognized) {
                _this._lastRoutesRecognized = event;
            }
            else if (event instanceof ResolveEnd) {
                _this.dispatchRouterDataResolved(event);
            }
            else if (event instanceof NavigationCancel) {
                _this.dispatchRouterCancel(event);
                _this.reset();
            }
            else if (event instanceof NavigationError) {
                _this.dispatchRouterError(event);
                _this.reset();
            }
            else if (event instanceof NavigationEnd) {
                _this.navigationEnd();
                _this.reset();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigationStart = /**
     * @private
     * @return {?}
     */
    function () {
        this._routerState = this._serializer.serialize(this._router.routerState.snapshot);
        if (this._trigger !== 'none') {
            this._storeState = this._store.selectSnapshot(RouterState_1);
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.navigationEnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.shouldDispatchRouterNavigation()) {
            this.dispatchRouterNavigation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.shouldDispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this._storeState)
            return true;
        return this._trigger !== 'store';
    };
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    RouterState.prototype.navigateIfNeeded = /**
     * @private
     * @param {?} state
     * @return {?}
     */
    function (state) {
        var _this = this;
        /** @type {?} */
        var canSkipNavigation = !this._storeState ||
            !this._storeState.state ||
            !state ||
            state.trigger === 'router' ||
            this._router.url === this._storeState.state.url;
        if (canSkipNavigation) {
            return;
        }
        this._trigger = 'store';
        this._ngZone.run((/**
         * @return {?}
         */
        function () {
            _this._router.navigateByUrl((/** @type {?} */ ((/** @type {?} */ (_this._storeState)).state)).url);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.dispatchRouterNavigation = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nextRouterState = this._serializer.serialize(this._lastRoutesRecognized.state);
        this.dispatchRouterAction(new RouterNavigation(nextRouterState, new RoutesRecognized(this._lastRoutesRecognized.id, this._lastRoutesRecognized.url, this._lastRoutesRecognized.urlAfterRedirects, nextRouterState), this._trigger));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterCancel = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterCancel((/** @type {?} */ (this._routerState)), this._storeState, event, this._trigger));
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterError = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dispatchRouterAction(new RouterError((/** @type {?} */ (this._routerState)), this._storeState, new NavigationError(event.id, event.url, "" + event), this._trigger));
    };
    /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    RouterState.prototype.dispatchRouterAction = /**
     * @private
     * @template T
     * @param {?} action
     * @return {?}
     */
    function (action) {
        this._trigger = 'router';
        try {
            this._store.dispatch(action);
        }
        finally {
            this._trigger = 'none';
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    RouterState.prototype.dispatchRouterDataResolved = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var routerState = this._serializer.serialize(event.state);
        this.dispatchRouterAction(new RouterDataResolved(routerState, event, this._trigger));
    };
    /**
     * @private
     * @return {?}
     */
    RouterState.prototype.reset = /**
     * @private
     * @return {?}
     */
    function () {
        this._trigger = 'none';
        this._storeState = null;
        this._routerState = null;
    };
    /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     */
    /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     * @private
     * @return {?}
     */
    RouterState.prototype.checkInitialNavigationOnce = /**
     * No sense to mess up the `setUpRouterEventsListener` method as we have
     * to perform this check only once and unsubscribe after the first event
     * is triggered
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (isAngularInTestMode()) {
            return;
        }
        this._router.events
            .pipe(first((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event instanceof RoutesRecognized; })))
            .subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            // `location.pathname` always equals manually entered URL in the address bar
            // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized
            // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the
            // `RouterNavigation` action will be dispatched and the user will be redirected to the
            // previously saved URL. We want to prevent such behavior, so we perform this check
            var url = _a.url;
            // `location.pathname` always equals manually entered URL in the address bar
            // e.g. `location.pathname === '/foo'`, but the `router` state has been initialized
            // with another URL (e.g. used in combination with `NgxsStoragePlugin`), thus the
            // `RouterNavigation` action will be dispatched and the user will be redirected to the
            // previously saved URL. We want to prevent such behavior, so we perform this check
            // `url` is a recognized URL by the Angular's router, while `currentUrl` is an actual URL
            // entered in the browser's address bar
            // `PathLocationStrategy.prototype.path()` returns a concatenation of
            // `PlatformLocation.pathname` and normalized `PlatformLocation.search`.
            // `Location.prototype.normalize` strips base href from the URL,
            // if `baseHref` (declared in angular.json) for example is `/en`
            // and the URL is `/test#anchor` - then `_locationStrategy.path(true)` will return `/en/test#anchor`,
            // but `/en/test#anchor` is not known to the Angular's router, so we have to strip `/en`
            // from the URL
            /** @type {?} */
            var currentUrl = _this._location.normalize(_this._locationStrategy.path(true));
            /** @type {?} */
            var currentUrlTree = _this._urlSerializer.parse(currentUrl);
            // We need to serialize the URL because in that example `/test/?redirect=https://google.com/`
            // Angular will recognize it as `/test?redirect=https:%2F%2Fwww.google.com%2F`
            // so we have to run the `currentUrl` via the `UrlSerializer` that will encode characters
            /** @type {?} */
            var currentSerializedUrl = _this._urlSerializer.serialize(currentUrlTree);
            // If URLs differ from each other - we've got to perform a redirect to the manually entered URL
            // in the address bar, as it must have a priority
            if (currentSerializedUrl !== url) {
                _this._router.navigateByUrl(currentUrl);
            }
        }));
    };
    var RouterState_1;
    RouterState.ctorParameters = function () { return [
        { type: Store },
        { type: Router },
        { type: RouterStateSerializer },
        { type: NgZone },
        { type: UrlSerializer },
        { type: LocationStrategy },
        { type: Location }
    ]; };
    /** @nocollapse */
    RouterState.ctorParameters = function () { return [
        { type: Store },
        { type: Router },
        { type: RouterStateSerializer },
        { type: NgZone },
        { type: UrlSerializer },
        { type: LocationStrategy },
        { type: Location }
    ]; };
    tslib_1.__decorate([
        Action(Navigate),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Navigate]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterState.prototype, "navigate", null);
    tslib_1.__decorate([
        Action([RouterNavigation, RouterError, RouterCancel, RouterDataResolved]),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterState.prototype, "angularRouterAction", null);
    tslib_1.__decorate([
        Selector(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], RouterState, "state", null);
    tslib_1.__decorate([
        Selector(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", Object)
    ], RouterState, "url", null);
    RouterState = RouterState_1 = tslib_1.__decorate([
        State({
            name: 'router',
            defaults: {
                state: undefined,
                navigationId: undefined,
                trigger: 'none'
            }
        }),
        tslib_1.__metadata("design:paramtypes", [Store,
            Router,
            RouterStateSerializer,
            NgZone,
            UrlSerializer,
            LocationStrategy,
            Location])
    ], RouterState);
RouterState.ɵfac = function RouterState_Factory(t) { return new (t || RouterState)(ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(RouterStateSerializer), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc2.UrlSerializer), ɵngcc0.ɵɵinject(ɵngcc3.LocationStrategy), ɵngcc0.ɵɵinject(ɵngcc3.Location)); };
RouterState.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: RouterState, factory: function (t) { return RouterState.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(RouterState, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Store }, { type: ɵngcc2.Router }, { type: RouterStateSerializer }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.UrlSerializer }, { type: ɵngcc3.LocationStrategy }, { type: ɵngcc3.Location }]; }, null); })();
    return RouterState;
}());
export { RouterState };
if (false) {
    /**
     * Determines how navigation was performed by the `RouterState` itself
     * or outside via `new Navigate(...)`
     * @type {?}
     * @private
     */
    RouterState.prototype._trigger;
    /**
     * That's the serialized state from the `Router` class
     * @type {?}
     * @private
     */
    RouterState.prototype._routerState;
    /**
     * That's the value of the `RouterState` state
     * @type {?}
     * @private
     */
    RouterState.prototype._storeState;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._lastRoutesRecognized;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._store;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._router;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._serializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._urlSerializer;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._locationStrategy;
    /**
     * @type {?}
     * @private
     */
    RouterState.prototype._location;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,