/**
 * @fileoverview added by tsickle
 * Generated from: lib/reset.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { getActionTypeFromInstance, getValue, setValue } from '@ngxs/store';
import { ResetService } from './reset.service';
import { getMetaData, StateClear, StateOverwrite, StateReset, StateResetAll, } from './symbols';
import * as ɵngcc0 from '@angular/core';
export class NgxsResetPlugin {
    /**
     * @param {?} resetService
     */
    constructor(resetService) {
        this.resetService = resetService;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    clearStates(state, statesToKeep) {
        return statesToKeep
            .map((/**
         * @param {?} meta
         * @return {?}
         */
        meta => getPath(meta)))
            .map((/**
         * @param {?} path
         * @return {?}
         */
        path => ({
            parts: path.split('.'),
            value: getValue(state, path),
        })))
            .reduce((/**
         * @param {?} obj
         * @param {?} __1
         * @return {?}
         */
        (obj, { parts, value }) => parts.reduceRight((/**
         * @param {?} acc
         * @param {?} part
         * @return {?}
         */
        (acc, part) => part in obj
            ? {
                [part]: Object.assign(Object.assign({}, obj[part]), acc),
            }
            : { [part]: acc }), value)), (/** @type {?} */ ({})));
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToOverwrite
     * @param {?} values
     * @return {?}
     */
    overwriteStates(state, statesToOverwrite, values) {
        statesToOverwrite.forEach((/**
         * @param {?} meta
         * @param {?} index
         * @return {?}
         */
        (meta, index) => (state = setValue(state, getPath(meta), values[index]))));
        return state;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToReset
     * @return {?}
     */
    resetStates(state, statesToReset) {
        statesToReset.forEach((/**
         * @param {?} meta
         * @return {?}
         */
        meta => {
            state = setValue(state, getPath(meta), typeof meta.defaults === 'undefined' ? {} : meta.defaults);
            if (meta.children) {
                state = this.resetStates(state, (/** @type {?} */ (meta.children.map(getMetaData))));
            }
        }));
        return state;
    }
    /**
     * @private
     * @param {?} state
     * @param {?} statesToKeep
     * @return {?}
     */
    resetStatesAll(state, statesToKeep) {
        /** @type {?} */
        const values = statesToKeep.map((/**
         * @param {?} meta
         * @return {?}
         */
        meta => getValue(state, getPath(meta))));
        return this.overwriteStates(this.resetService.initialState, statesToKeep, values);
    }
    /**
     * @param {?} state
     * @param {?} action
     * @param {?} next
     * @return {?}
     */
    handle(state, action, next) {
        /** @type {?} */
        const type = getActionTypeFromInstance(action);
        switch (type) {
            case StateClear.type:
                state = this.clearStates(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateReset.type:
                state = this.resetStates(state, ((/** @type {?} */ (action))).statesToReset);
                break;
            case StateResetAll.type:
                state = this.resetStatesAll(state, ((/** @type {?} */ (action))).statesToKeep);
                break;
            case StateOverwrite.type:
                const { statesToOverwrite, values } = (/** @type {?} */ (action));
                state = this.overwriteStates(state, statesToOverwrite, values);
                break;
            default:
                break;
        }
        return next(state, action);
    }
}
NgxsResetPlugin.ɵfac = function NgxsResetPlugin_Factory(t) { return new (t || NgxsResetPlugin)(ɵngcc0.ɵɵinject(ResetService)); };
NgxsResetPlugin.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxsResetPlugin, factory: NgxsResetPlugin.ɵfac });
/** @nocollapse */
NgxsResetPlugin.ctorParameters = () => [
    { type: ResetService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxsResetPlugin, [{
        type: Injectable
    }], function () { return [{ type: ResetService }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsResetPlugin.prototype.resetService;
}
/**
 * @param {?} meta
 * @return {?}
 */
function getPath(meta) {
    return meta.path;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,