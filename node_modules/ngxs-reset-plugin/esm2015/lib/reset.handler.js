/**
 * @fileoverview added by tsickle
 * Generated from: lib/reset.handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Actions, InitState, ofActionSuccessful, Store, UpdateState } from '@ngxs/store';
import { take } from 'rxjs/operators';
import { ResetService } from './reset.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngxs/store';
export class ResetHandler {
    /**
     * @param {?} actions$
     * @param {?} store
     * @param {?} resetService
     */
    constructor(actions$, store, resetService) {
        this.actions$ = actions$;
        this.store = store;
        this.resetService = resetService;
        this.actions$
            .pipe(ofActionSuccessful(InitState), take(1))
            .subscribe((/**
         * @return {?}
         */
        () => (this.resetService.initialState = this.store.snapshot())));
        this.actions$.pipe(ofActionSuccessful(UpdateState)).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ addedStates }) => (this.resetService.initialState = Object.assign(Object.assign({}, this.resetService.initialState), addedStates))));
    }
}
ResetHandler.ɵfac = function ResetHandler_Factory(t) { return new (t || ResetHandler)(ɵngcc0.ɵɵinject(ɵngcc1.Actions), ɵngcc0.ɵɵinject(ɵngcc1.Store), ɵngcc0.ɵɵinject(ResetService)); };
ResetHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ResetHandler, factory: ResetHandler.ɵfac });
/** @nocollapse */
ResetHandler.ctorParameters = () => [
    { type: Actions },
    { type: Store },
    { type: ResetService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResetHandler, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.Actions }, { type: ɵngcc1.Store }, { type: ResetService }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.actions$;
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.store;
    /**
     * @type {?}
     * @private
     */
    ResetHandler.prototype.resetService;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQuaGFuZGxlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9yZXNldC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7OztBQUcvQyxNQUFNLE9BQU8sWUFBWTtBQUN6QjtBQUFRO0FBQ1k7QUFDUDtBQUNLO0FBQVEsSUFIeEIsWUFDVSxRQUFpQixFQUNqQixLQUFZLEVBQ1osWUFBMEI7QUFDcEMsUUFIVSxhQUFRLEdBQVIsUUFBUSxDQUFTO0FBQUMsUUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBTztBQUFDLFFBQ2IsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQUVuQyxJQUFJLENBQUMsUUFBUTtBQUNqQixhQUFPLElBQUksQ0FDSCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsRUFDN0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSO0FBQ1AsYUFBTyxTQUFTO0FBQU07QUFBdUI7QUFBWSxRQUF4QyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBQyxDQUFDO0FBQ2pGLFFBQ0ksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQzdEO0FBQ0Q7QUFBdUI7QUFBWSxRQURoQyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUNsQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxtQ0FDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEdBQzlCLFdBQVcsQ0FDZixDQUFDLEVBQ0wsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNIO3dDQXRCQyxVQUFVO29HQUNUO0FBQUM7QUFBbUI7QUFFTCxZQVBSLE9BQU87QUFBSSxZQUE2QixLQUFLO0FBQUksWUFFakQsWUFBWTtBQUFHOzs7d0hBQUU7QUFBQztBQUFhO0FBQ3hDO0FBRUU7QUFBZ0I7QUFBUSxJQUV0QixnQ0FBeUI7QUFBQztBQUN2QjtBQUFpQjtBQUNWO0FBQVEsSUFEbEIsNkJBQW9CO0FBQUM7QUFDbEI7QUFBaUI7QUFDeEI7QUFDRSxJQUZFLG9DQUFrQztBQUFDO0FBQ3RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgSW5pdFN0YXRlLCBvZkFjdGlvblN1Y2Nlc3NmdWwsIFN0b3JlLCBVcGRhdGVTdGF0ZSB9IGZyb20gJ0BuZ3hzL3N0b3JlJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXNldFNlcnZpY2UgfSBmcm9tICcuL3Jlc2V0LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVzZXRIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIHN0b3JlOiBTdG9yZSxcbiAgICBwcml2YXRlIHJlc2V0U2VydmljZTogUmVzZXRTZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLmFjdGlvbnMkXG4gICAgICAucGlwZShcbiAgICAgICAgb2ZBY3Rpb25TdWNjZXNzZnVsKEluaXRTdGF0ZSksXG4gICAgICAgIHRha2UoMSksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+ICh0aGlzLnJlc2V0U2VydmljZS5pbml0aWFsU3RhdGUgPSB0aGlzLnN0b3JlLnNuYXBzaG90KCkpKTtcblxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShvZkFjdGlvblN1Y2Nlc3NmdWwoVXBkYXRlU3RhdGUpKS5zdWJzY3JpYmUoXG4gICAgICAoeyBhZGRlZFN0YXRlcyB9KSA9PlxuICAgICAgICAodGhpcy5yZXNldFNlcnZpY2UuaW5pdGlhbFN0YXRlID0ge1xuICAgICAgICAgIC4uLnRoaXMucmVzZXRTZXJ2aWNlLmluaXRpYWxTdGF0ZSxcbiAgICAgICAgICAuLi5hZGRlZFN0YXRlcyxcbiAgICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl19